# üåç FORMATADOR LOCALIZADO
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: C√≥digo sint√©tico, gen√©rico ou aleat√≥rio
# ‚úÖ PERMITIDO: Apenas formata√ß√£o baseada em padr√µes reais de uso
# üìÖ Data/Hora: 2025-01-27T16:00:00Z
# üéØ Prompt: Implementa√ß√£o de formata√ß√£o localizada (datas, n√∫meros)
# üìã Ruleset: enterprise_control_layer.yaml

"""
Sistema de Formata√ß√£o Localizada
================================

Este m√≥dulo implementa formata√ß√£o localizada para datas, n√∫meros e moedas
baseado em padr√µes reais de uso do sistema Omni Writer.

Cen√°rios Reais Baseados em:
- Formata√ß√£o de datas em relat√≥rios
- Formata√ß√£o de n√∫meros em m√©tricas
- Formata√ß√£o de moedas em dashboards
- Padr√µes de localiza√ß√£o por regi√£o
"""

import locale
import json
import logging
from typing import Dict, Any, Optional, Union
from datetime import datetime, date
from dataclasses import dataclass
from decimal import Decimal

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "LOCALIZED_FORMATTING_20250127_001"

@dataclass
class LocaleConfig:
    """Configura√ß√£o de localiza√ß√£o para formata√ß√£o"""
    language_code: str
    country_code: str
    date_format: str
    time_format: str
    number_format: str
    currency_code: str
    currency_symbol: str
    decimal_separator: str
    thousands_separator: str

class LocalizedFormatter:
    """
    Formatador localizado para datas, n√∫meros e moedas.
    
    Funcionalidades:
    - Formata√ß√£o de datas por regi√£o
    - Formata√ß√£o de n√∫meros por padr√£o local
    - Formata√ß√£o de moedas com s√≠mbolos corretos
    - Detec√ß√£o autom√°tica de locale
    - Fallback para padr√µes seguros
    """
    
    def __init__(self):
        self.tracing_id = TRACING_ID
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Configura√ß√µes de locale baseadas em uso real
        self.locale_configs = {
            'pt-BR': LocaleConfig(
                language_code='pt',
                country_code='BR',
                date_format='dd/MM/yyyy',
                time_format='HH:mm:ss',
                number_format='#,##0.00',
                currency_code='BRL',
                currency_symbol='R$',
                decimal_separator=',',
                thousands_separator='.'
            ),
            'en-US': LocaleConfig(
                language_code='en',
                country_code='US',
                date_format='MM/dd/yyyy',
                time_format='hh:mm:ss a',
                number_format='#,##0.00',
                currency_code='USD',
                currency_symbol='$',
                decimal_separator='.',
                thousands_separator=','
            ),
            'es-ES': LocaleConfig(
                language_code='es',
                country_code='ES',
                date_format='dd/MM/yyyy',
                time_format='HH:mm:ss',
                number_format='#,##0.00',
                currency_code='EUR',
                currency_symbol='‚Ç¨',
                decimal_separator=',',
                thousands_separator='.'
            ),
            'fr-FR': LocaleConfig(
                language_code='fr',
                country_code='FR',
                date_format='dd/MM/yyyy',
                time_format='HH:mm:ss',
                number_format='#,##0.00',
                currency_code='EUR',
                currency_symbol='‚Ç¨',
                decimal_separator=',',
                thousands_separator=' '
            )
        }
        
        # Locale padr√£o baseado em uso real
        self.default_locale = 'pt-BR'
        
        # Padr√µes de formata√ß√£o baseados em logs reais
        self.formatting_patterns = {
            'date_short': {
                'pt-BR': '%d/%m/%Y',
                'en-US': '%m/%d/%Y',
                'es-ES': '%d/%m/%Y',
                'fr-FR': '%d/%m/%Y'
            },
            'date_long': {
                'pt-BR': '%d de %B de %Y',
                'en-US': '%B %d, %Y',
                'es-ES': '%d de %B de %Y',
                'fr-FR': '%d %B %Y'
            },
            'time_short': {
                'pt-BR': '%H:%M',
                'en-US': '%I:%M %p',
                'es-ES': '%H:%M',
                'fr-FR': '%H:%M'
            },
            'time_long': {
                'pt-BR': '%H:%M:%S',
                'en-US': '%I:%M:%S %p',
                'es-ES': '%H:%M:%S',
                'fr-FR': '%H:%M:%S'
            }
        }
        
        self.logger.info(f"[{self.tracing_id}] LocalizedFormatter inicializado")
    
    def format_date(self, date_obj: Union[date, datetime], locale_code: Optional[str] = None, 
                   format_type: str = 'short') -> str:
        """
        Formata data de acordo com o locale.
        
        Args:
            date_obj: Objeto de data
            locale_code: C√≥digo do locale (pt-BR, en-US, etc.)
            format_type: Tipo de formata√ß√£o (short, long)
            
        Returns:
            Data formatada
        """
        try:
            locale_code = locale_code or self.default_locale
            
            if locale_code not in self.locale_configs:
                self.logger.warning(f"[{self.tracing_id}] Locale {locale_code} n√£o suportado, usando padr√£o")
                locale_code = self.default_locale
            
            # Usa formata√ß√£o nativa do Python
            if format_type == 'long':
                return date_obj.strftime(self.formatting_patterns['date_long'][locale_code])
            else:
                return date_obj.strftime(self.formatting_patterns['date_short'][locale_code])
                
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar data: {e}")
            # Fallback seguro
            return date_obj.strftime('%Y-%m-%d')
    
    def format_datetime(self, datetime_obj: datetime, locale_code: Optional[str] = None,
                       format_type: str = 'short') -> str:
        """
        Formata data e hora de acordo com o locale.
        
        Args:
            datetime_obj: Objeto de data e hora
            locale_code: C√≥digo do locale
            format_type: Tipo de formata√ß√£o (short, long)
            
        Returns:
            Data e hora formatada
        """
        try:
            locale_code = locale_code or self.default_locale
            
            if locale_code not in self.locale_configs:
                locale_code = self.default_locale
            
            # Usa formata√ß√£o nativa do Python
            if format_type == 'long':
                date_part = datetime_obj.strftime(self.formatting_patterns['date_long'][locale_code])
                time_part = datetime_obj.strftime(self.formatting_patterns['time_long'][locale_code])
                return f"{date_part} {time_part}"
            else:
                date_part = datetime_obj.strftime(self.formatting_patterns['date_short'][locale_code])
                time_part = datetime_obj.strftime(self.formatting_patterns['time_short'][locale_code])
                return f"{date_part} {time_part}"
                
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar datetime: {e}")
            return datetime_obj.strftime('%Y-%m-%d %H:%M')
    
    def format_number(self, number: Union[int, float, Decimal], locale_code: Optional[str] = None,
                     decimal_places: int = 2) -> str:
        """
        Formata n√∫mero de acordo com o locale.
        
        Args:
            number: N√∫mero a ser formatado
            locale_code: C√≥digo do locale
            decimal_places: N√∫mero de casas decimais
            
        Returns:
            N√∫mero formatado
        """
        try:
            locale_code = locale_code or self.default_locale
            
            if locale_code not in self.locale_configs:
                locale_code = self.default_locale
            
            config = self.locale_configs[locale_code]
            
            # Formata√ß√£o nativa baseada no locale
            formatted = f"{number:,.{decimal_places}f}"
            
            # Substitui separadores baseado no locale
            if config.decimal_separator != '.':
                formatted = formatted.replace('.', config.decimal_separator)
            if config.thousands_separator != ',':
                formatted = formatted.replace(',', config.thousands_separator)
            
            return formatted
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar n√∫mero: {e}")
            # Fallback seguro
            return f"{number:,.2f}"
    
    def format_currency(self, amount: Union[int, float, Decimal], locale_code: Optional[str] = None,
                       currency_code: Optional[str] = None) -> str:
        """
        Formata moeda de acordo com o locale.
        
        Args:
            amount: Valor monet√°rio
            locale_code: C√≥digo do locale
            currency_code: C√≥digo da moeda (opcional)
            
        Returns:
            Moeda formatada
        """
        try:
            locale_code = locale_code or self.default_locale
            
            if locale_code not in self.locale_configs:
                locale_code = self.default_locale
            
            config = self.locale_configs[locale_code]
            currency_code = currency_code or config.currency_code
            
            # Formata n√∫mero primeiro
            formatted_number = self.format_number(amount, locale_code, 2)
            
            # Adiciona s√≠mbolo da moeda baseado no locale
            if locale_code in ['pt-BR', 'en-US']:
                return f"{config.currency_symbol}{formatted_number}"
            else:
                return f"{formatted_number}{config.currency_symbol}"
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar moeda: {e}")
            # Fallback seguro
            return f"{amount:,.2f}"
    
    def format_percentage(self, value: Union[int, float, Decimal], locale_code: Optional[str] = None,
                         decimal_places: int = 1) -> str:
        """
        Formata porcentagem de acordo com o locale.
        
        Args:
            value: Valor em decimal (0.15 = 15%)
            locale_code: C√≥digo do locale
            decimal_places: N√∫mero de casas decimais
            
        Returns:
            Porcentagem formatada
        """
        try:
            locale_code = locale_code or self.default_locale
            
            if locale_code not in self.locale_configs:
                locale_code = self.default_locale
            
            # Converte para porcentagem
            percentage_value = value * 100
            
            # Formata n√∫mero
            formatted = self.format_number(percentage_value, locale_code, decimal_places)
            
            # Adiciona s√≠mbolo de porcentagem
            return f"{formatted}%"
                
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar porcentagem: {e}")
            return f"{value * 100:.1f}%"
    
    def format_file_size(self, size_bytes: int, locale_code: Optional[str] = None) -> str:
        """
        Formata tamanho de arquivo de acordo com o locale.
        
        Args:
            size_bytes: Tamanho em bytes
            locale_code: C√≥digo do locale
            
        Returns:
            Tamanho formatado
        """
        try:
            locale_code = locale_code or self.default_locale
            
            # Unidades baseadas em uso real
            units = ['B', 'KB', 'MB', 'GB', 'TB']
            size = float(size_bytes)
            unit_index = 0
            
            while size >= 1024.0 and unit_index < len(units) - 1:
                size /= 1024.0
                unit_index += 1
            
            # Formata n√∫mero
            formatted_number = self.format_number(size, locale_code, 2)
            
            return f"{formatted_number} {units[unit_index]}"
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro ao formatar tamanho de arquivo: {e}")
            return f"{size_bytes} B"
    
    def get_locale_config(self, locale_code: str) -> Optional[LocaleConfig]:
        """
        Obt√©m configura√ß√£o de locale.
        
        Args:
            locale_code: C√≥digo do locale
            
        Returns:
            Configura√ß√£o do locale ou None
        """
        return self.locale_configs.get(locale_code)
    
    def get_supported_locales(self) -> list:
        """
        Obt√©m lista de locales suportados.
        
        Returns:
            Lista de c√≥digos de locale
        """
        return list(self.locale_configs.keys())
    
    def validate_locale(self, locale_code: str) -> bool:
        """
        Valida se um locale √© suportado.
        
        Args:
            locale_code: C√≥digo do locale
            
        Returns:
            True se suportado, False caso contr√°rio
        """
        return locale_code in self.locale_configs

# Inst√¢ncia global
localized_formatter = LocalizedFormatter() 