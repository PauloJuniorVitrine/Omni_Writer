version: '3.8'

services:
  # Aplicação principal
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_SECRET_KEY=changeme
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - ARTIGOS_DIR=/app/artigos_gerados
      - OUTPUT_BASE_DIR=/app/output
      - STATUS_DB_PATH=/app/status.db
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://omniwriter:omniwriter@postgres:5432/omniwriter
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./output:/app/output
    restart: unless-stopped
    networks:
      - omni-network

  # Workers Celery
  worker:
    build: .
    command: celery -A app.celery_worker.celery_app worker --loglevel=info --concurrency=4
    depends_on:
      - redis
      - postgres
    environment:
      - FLASK_SECRET_KEY=changeme
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - ARTIGOS_DIR=/app/artigos_gerados
      - OUTPUT_BASE_DIR=/app/output
      - STATUS_DB_PATH=/app/status.db
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://omniwriter:omniwriter@postgres:5432/omniwriter
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./output:/app/output
    restart: unless-stopped
    networks:
      - omni-network
    deploy:
      replicas: 2

  # Worker de alta prioridade
  worker-high-priority:
    build: .
    command: celery -A app.celery_worker.celery_app worker --loglevel=info --concurrency=2 -Q high_priority
    depends_on:
      - redis
      - postgres
    environment:
      - FLASK_SECRET_KEY=changeme
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - ARTIGOS_DIR=/app/artigos_gerados
      - OUTPUT_BASE_DIR=/app/output
      - STATUS_DB_PATH=/app/status.db
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://omniwriter:omniwriter@postgres:5432/omniwriter
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./output:/app/output
    restart: unless-stopped
    networks:
      - omni-network

  # Beat scheduler
  beat:
    build: .
    command: celery -A app.celery_worker.celery_app beat --loglevel=info
    depends_on:
      - redis
      - postgres
    environment:
      - FLASK_SECRET_KEY=changeme
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - ARTIGOS_DIR=/app/artigos_gerados
      - OUTPUT_BASE_DIR=/app/output
      - STATUS_DB_PATH=/app/status.db
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://omniwriter:omniwriter@postgres:5432/omniwriter
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - omni-network

  # Redis como broker
  redis:
    image: redis:7.2-alpine
    container_name: omniwriter-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - omni-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL como banco principal
  postgres:
    image: postgres:15-alpine
    container_name: omniwriter-postgres
    environment:
      - POSTGRES_DB=omniwriter
      - POSTGRES_USER=omniwriter
      - POSTGRES_PASSWORD=omniwriter
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - omni-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: omniwriter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - omni-network

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: omniwriter-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - omni-network
    depends_on:
      - prometheus

  # Flower para monitoramento do Celery
  flower:
    image: mher/flower:latest
    container_name: omniwriter-flower
    ports:
      - "5555:5555"
    environment:
      - FLOWER_BROKER_API=redis://redis:6379/0
      - FLOWER_PERSISTENT=True
      - FLOWER_DB=/flower/flower.db
    volumes:
      - flower_data:/flower
    restart: unless-stopped
    networks:
      - omni-network
    depends_on:
      - redis

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: omniwriter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped
    networks:
      - omni-network
    depends_on:
      - app

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  flower_data:

networks:
  omni-network:
    driver: bridge 