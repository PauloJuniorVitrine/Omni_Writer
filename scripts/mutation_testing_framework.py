#!/usr/bin/env python3
"""
üß¨ FRAMEWORK DE MUTATION TESTING PARA SERVI√áOS EXTERNOS
üìê CoCoT + ToT + ReAct - Baseado em C√≥digo Real
üö´ PROIBIDO: Testes sint√©ticos, gen√©ricos ou aleat√≥rios
‚úÖ PERMITIDO: Apenas testes baseados em c√≥digo real do Omni Writer

Framework para mutation testing de servi√ßos externos.
Valida robustez contra falhas de APIs e depend√™ncias.

Tracing ID: MUTATION_TESTING_FRAMEWORK_20250127_001
Data/Hora: 2025-01-27T17:30:00Z
Vers√£o: 1.0
"""

import time
import json
import logging
import threading
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from pathlib import Path
import sqlite3
import uuid
from unittest.mock import patch, Mock
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed

# Configura√ß√£o de logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s'
)
logger = logging.getLogger(__name__)

TRACING_ID = "MUTATION_TESTING_FRAMEWORK_20250127_001"

@dataclass
class MutationScenario:
    """Cen√°rio de muta√ß√£o para testar robustez."""
    name: str
    description: str
    service: str
    mutation_type: str  # "timeout", "error", "corruption", "circuit_breaker"
    severity: str  # "low", "medium", "high", "critical"
    probability: float  # 0.0 a 1.0
    timeout_ms: int = 5000
    tracing_id: str = TRACING_ID

@dataclass
class MutationTestResult:
    """Resultado de um teste de muta√ß√£o."""
    test_id: str
    scenario_name: str
    service: str
    mutation_type: str
    timestamp: datetime
    test_passed: bool
    error_handled: bool
    fallback_used: bool
    recovery_time_ms: int
    error_message: Optional[str] = None
    tracing_id: str = TRACING_ID

@dataclass
class ServiceConfig:
    """Configura√ß√£o de um servi√ßo para mutation testing."""
    service_name: str
    base_url: str
    endpoints: List[str]
    risk_score: int
    critical: bool
    fallback_strategy: str
    timeout_ms: int = 5000
    retry_attempts: int = 3
    circuit_breaker_enabled: bool = True
    tracing_id: str = TRACING_ID

class MutationTestingFramework:
    """
    Framework de mutation testing para servi√ßos externos.
    
    Valida robustez dos testes contra falhas de APIs e depend√™ncias.
    """
    
    def __init__(self, db_path: str = "tests/integration/mutation_testing.db"):
        self.tracing_id = TRACING_ID
        self.db_path = db_path
        self.active_tests: Dict[str, MutationScenario] = {}
        self.results: List[MutationTestResult] = []
        self.lock = threading.Lock()
        
        # Configura√ß√£o de servi√ßos (baseado em c√≥digo real do Omni Writer)
        self.services = self._load_services_config()
        
        # Cen√°rios de muta√ß√£o (baseados em falhas reais)
        self.mutation_scenarios = self._load_mutation_scenarios()
        
        # Inicializa banco de dados
        self._init_database()
        
        logger.info(f"[{self.tracing_id}] MutationTestingFramework inicializado")
        logger.info(f"[{self.tracing_id}] Servi√ßos: {len(self.services)}")
        logger.info(f"[{self.tracing_id}] Cen√°rios: {len(self.mutation_scenarios)}")
    
    def _load_services_config(self) -> List[ServiceConfig]:
        """
        Carrega configura√ß√£o de servi√ßos baseada em c√≥digo real.
        
        Servi√ßos identificados atrav√©s de an√°lise do c√≥digo do Omni Writer:
        - OpenAI Gateway: Gera√ß√£o de conte√∫do
        - PostgreSQL: Armazenamento de dados
        - Redis: Cache e sess√µes
        - Stripe: Processamento de pagamentos
        """
        return [
            ServiceConfig(
                service_name="openai_gateway",
                base_url="https://api.openai.com/v1",
                endpoints=["/chat/completions", "/completions"],
                risk_score=150,  # Alto risco - gera√ß√£o de conte√∫do
                critical=True,
                fallback_strategy="retry_with_backoff",
                timeout_ms=30000,
                retry_attempts=3,
                circuit_breaker_enabled=True
            ),
            ServiceConfig(
                service_name="postgresql",
                base_url="postgresql://localhost:5432",
                endpoints=["/query", "/transaction"],
                risk_score=120,  # Alto risco - dados persistentes
                critical=True,
                fallback_strategy="connection_pool",
                timeout_ms=10000,
                retry_attempts=5,
                circuit_breaker_enabled=True
            ),
            ServiceConfig(
                service_name="redis",
                base_url="redis://localhost:6379",
                endpoints=["/get", "/set", "/del"],
                risk_score=80,  # M√©dio risco - cache
                critical=False,
                fallback_strategy="skip_cache",
                timeout_ms=5000,
                retry_attempts=2,
                circuit_breaker_enabled=False
            ),
            ServiceConfig(
                service_name="stripe",
                base_url="https://api.stripe.com/v1",
                endpoints=["/payment_intents", "/webhooks"],
                risk_score=140,  # Alto risco - pagamentos
                critical=True,
                fallback_strategy="queue_retry",
                timeout_ms=15000,
                retry_attempts=3,
                circuit_breaker_enabled=True
            ),
            ServiceConfig(
                service_name="deepseek_gateway",
                base_url="https://api.deepseek.com/v1",
                endpoints=["/chat/completions"],
                risk_score=130,  # Alto risco - gera√ß√£o alternativa
                critical=True,
                fallback_strategy="fallback_to_openai",
                timeout_ms=25000,
                retry_attempts=2,
                circuit_breaker_enabled=True
            )
        ]
    
    def _load_mutation_scenarios(self) -> List[MutationScenario]:
        """
        Carrega cen√°rios de muta√ß√£o baseados em falhas reais.
        
        Cen√°rios baseados em an√°lise de logs e incidentes reais:
        - Timeouts de rede
        - Erros de API
        - Respostas corrompidas
        - Circuit breaker ativado
        """
        return [
            # Timeouts
            MutationScenario(
                name="network_timeout",
                description="Simula timeout de rede",
                service="all",
                mutation_type="timeout",
                severity="medium",
                probability=0.3,
                timeout_ms=1000
            ),
            MutationScenario(
                name="api_timeout",
                description="Simula timeout de API",
                service="openai_gateway",
                mutation_type="timeout",
                severity="high",
                probability=0.2,
                timeout_ms=30000
            ),
            
            # Erros HTTP
            MutationScenario(
                name="http_500",
                description="Simula erro interno do servidor",
                service="all",
                mutation_type="error",
                severity="medium",
                probability=0.25
            ),
            MutationScenario(
                name="http_429",
                description="Simula rate limiting",
                service="openai_gateway",
                mutation_type="error",
                severity="high",
                probability=0.15
            ),
            MutationScenario(
                name="http_503",
                description="Simula servi√ßo indispon√≠vel",
                service="all",
                mutation_type="error",
                severity="critical",
                probability=0.1
            ),
            
            # Respostas corrompidas
            MutationScenario(
                name="invalid_json",
                description="Simula resposta JSON inv√°lida",
                service="openai_gateway",
                mutation_type="corruption",
                severity="medium",
                probability=0.1
            ),
            MutationScenario(
                name="empty_response",
                description="Simula resposta vazia",
                service="all",
                mutation_type="corruption",
                severity="low",
                probability=0.05
            ),
            MutationScenario(
                name="malformed_data",
                description="Simula dados malformados",
                service="postgresql",
                mutation_type="corruption",
                severity="high",
                probability=0.1
            ),
            
            # Circuit Breaker
            MutationScenario(
                name="circuit_breaker_open",
                description="Simula circuit breaker aberto",
                service="openai_gateway",
                mutation_type="circuit_breaker",
                severity="critical",
                probability=0.05
            ),
            MutationScenario(
                name="circuit_breaker_half_open",
                description="Simula circuit breaker semi-aberto",
                service="stripe",
                mutation_type="circuit_breaker",
                severity="high",
                probability=0.1
            ),
            
            # Falhas espec√≠ficas de servi√ßo
            MutationScenario(
                name="openai_quota_exceeded",
                description="Simula quota excedida da OpenAI",
                service="openai_gateway",
                mutation_type="error",
                severity="high",
                probability=0.1
            ),
            MutationScenario(
                name="postgresql_connection_failed",
                description="Simula falha de conex√£o PostgreSQL",
                service="postgresql",
                mutation_type="error",
                severity="critical",
                probability=0.1
            ),
            MutationScenario(
                name="stripe_payment_failed",
                description="Simula falha de pagamento Stripe",
                service="stripe",
                mutation_type="error",
                severity="critical",
                probability=0.1
            )
        ]
    
    def _init_database(self):
        """Inicializa banco de dados SQLite para mutation testing."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Tabela de configura√ß√µes de servi√ßos
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS service_configs (
                    service_name TEXT PRIMARY KEY,
                    base_url TEXT NOT NULL,
                    endpoints TEXT NOT NULL,
                    risk_score INTEGER NOT NULL,
                    critical BOOLEAN NOT NULL,
                    fallback_strategy TEXT NOT NULL,
                    timeout_ms INTEGER NOT NULL,
                    retry_attempts INTEGER NOT NULL,
                    circuit_breaker_enabled BOOLEAN NOT NULL,
                    tracing_id TEXT NOT NULL,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Tabela de cen√°rios de muta√ß√£o
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS mutation_scenarios (
                    name TEXT PRIMARY KEY,
                    description TEXT NOT NULL,
                    service TEXT NOT NULL,
                    mutation_type TEXT NOT NULL,
                    severity TEXT NOT NULL,
                    probability REAL NOT NULL,
                    timeout_ms INTEGER NOT NULL,
                    tracing_id TEXT NOT NULL,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Tabela de resultados de mutation testing
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS mutation_test_results (
                    test_id TEXT PRIMARY KEY,
                    scenario_name TEXT NOT NULL,
                    service TEXT NOT NULL,
                    mutation_type TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    test_passed BOOLEAN NOT NULL,
                    error_handled BOOLEAN NOT NULL,
                    fallback_used BOOLEAN NOT NULL,
                    recovery_time_ms INTEGER NOT NULL,
                    error_message TEXT,
                    tracing_id TEXT NOT NULL,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Insere configura√ß√µes padr√£o
            for service in self.services:
                cursor.execute('''
                    INSERT OR REPLACE INTO service_configs (
                        service_name, base_url, endpoints, risk_score, critical,
                        fallback_strategy, timeout_ms, retry_attempts,
                        circuit_breaker_enabled, tracing_id
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    service.service_name, service.base_url,
                    json.dumps(service.endpoints), service.risk_score,
                    service.critical, service.fallback_strategy,
                    service.timeout_ms, service.retry_attempts,
                    service.circuit_breaker_enabled, service.tracing_id
                ))
            
            # Insere cen√°rios de muta√ß√£o
            for scenario in self.mutation_scenarios:
                cursor.execute('''
                    INSERT OR REPLACE INTO mutation_scenarios (
                        name, description, service, mutation_type, severity,
                        probability, timeout_ms, tracing_id
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    scenario.name, scenario.description, scenario.service,
                    scenario.mutation_type, scenario.severity,
                    scenario.probability, scenario.timeout_ms, scenario.tracing_id
                ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"[{self.tracing_id}] Banco de dados inicializado: {self.db_path}")
            
        except Exception as e:
            logger.error(f"[{self.tracing_id}] Erro ao inicializar banco: {e}")
    
    def _create_mutation_mock(self, scenario: MutationScenario) -> Callable:
        """
        Cria mock para simular muta√ß√£o baseada no cen√°rio.
        
        Args:
            scenario: Cen√°rio de muta√ß√£o
            
        Returns:
            Fun√ß√£o mock para simular falha
        """
        if scenario.mutation_type == "timeout":
            def timeout_mock(*args, **kwargs):
                time.sleep(scenario.timeout_ms / 1000)
                raise requests.exceptions.Timeout("Simulated timeout")
            return timeout_mock
        
        elif scenario.mutation_type == "error":
            if scenario.name == "http_500":
                def error_500_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 500
                    response.text = "Internal Server Error"
                    response.raise_for_status.side_effect = requests.exceptions.HTTPError("500")
                    return response
                return error_500_mock
            
            elif scenario.name == "http_429":
                def error_429_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 429
                    response.text = "Rate limit exceeded"
                    response.raise_for_status.side_effect = requests.exceptions.HTTPError("429")
                    return response
                return error_429_mock
            
            elif scenario.name == "http_503":
                def error_503_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 503
                    response.text = "Service Unavailable"
                    response.raise_for_status.side_effect = requests.exceptions.HTTPError("503")
                    return response
                return error_503_mock
            
            else:
                def generic_error_mock(*args, **kwargs):
                    raise Exception(f"Simulated error: {scenario.name}")
                return generic_error_mock
        
        elif scenario.mutation_type == "corruption":
            if scenario.name == "invalid_json":
                def invalid_json_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 200
                    response.text = "Invalid JSON {"
                    response.json.side_effect = json.JSONDecodeError("Invalid JSON", "", 0)
                    return response
                return invalid_json_mock
            
            elif scenario.name == "empty_response":
                def empty_response_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 200
                    response.text = ""
                    response.json.return_value = {}
                    return response
                return empty_response_mock
            
            else:
                def corruption_mock(*args, **kwargs):
                    response = Mock()
                    response.status_code = 200
                    response.text = "Corrupted data"
                    response.json.return_value = {"error": "Data corruption"}
                    return response
                return corruption_mock
        
        elif scenario.mutation_type == "circuit_breaker":
            def circuit_breaker_mock(*args, **kwargs):
                raise Exception("Circuit breaker is open")
            return circuit_breaker_mock
        
        else:
            def default_mock(*args, **kwargs):
                raise Exception(f"Unknown mutation type: {scenario.mutation_type}")
            return default_mock
    
    def run_mutation_test(self, scenario_name: str, test_function: Callable) -> MutationTestResult:
        """
        Executa teste de muta√ß√£o para um cen√°rio espec√≠fico.
        
        Args:
            scenario_name: Nome do cen√°rio de muta√ß√£o
            test_function: Fun√ß√£o de teste a ser executada
            
        Returns:
            Resultado do teste de muta√ß√£o
        """
        # Encontra cen√°rio
        scenario = next((s for s in self.mutation_scenarios if s.name == scenario_name), None)
        if not scenario:
            raise ValueError(f"Cen√°rio n√£o encontrado: {scenario_name}")
        
        test_id = str(uuid.uuid4())
        timestamp = datetime.now()
        
        logger.info(f"[{self.tracing_id}] Executando mutation test: {scenario_name}")
        
        try:
            # Cria mock para muta√ß√£o
            mutation_mock = self._create_mutation_mock(scenario)
            
            # Aplica muta√ß√£o baseada no servi√ßo
            if scenario.service == "openai_gateway":
                with patch('infraestructure.openai_gateway.requests.post', side_effect=mutation_mock):
                    start_time = time.time()
                    result = test_function()
                    recovery_time_ms = int((time.time() - start_time) * 1000)
            
            elif scenario.service == "postgresql":
                with patch('sqlalchemy.engine.Engine.execute', side_effect=mutation_mock):
                    start_time = time.time()
                    result = test_function()
                    recovery_time_ms = int((time.time() - start_time) * 1000)
            
            elif scenario.service == "redis":
                with patch('redis.Redis.get', side_effect=mutation_mock):
                    start_time = time.time()
                    result = test_function()
                    recovery_time_ms = int((time.time() - start_time) * 1000)
            
            elif scenario.service == "stripe":
                with patch('stripe.PaymentIntent.create', side_effect=mutation_mock):
                    start_time = time.time()
                    result = test_function()
                    recovery_time_ms = int((time.time() - start_time) * 1000)
            
            else:
                # Muta√ß√£o gen√©rica para todos os servi√ßos
                with patch('requests.post', side_effect=mutation_mock), \
                     patch('requests.get', side_effect=mutation_mock):
                    start_time = time.time()
                    result = test_function()
                    recovery_time_ms = int((time.time() - start_time) * 1000)
            
            # Teste passou (erro foi tratado adequadamente)
            test_result = MutationTestResult(
                test_id=test_id,
                scenario_name=scenario_name,
                service=scenario.service,
                mutation_type=scenario.mutation_type,
                timestamp=timestamp,
                test_passed=True,
                error_handled=True,
                fallback_used=False,
                recovery_time_ms=recovery_time_ms
            )
            
        except Exception as e:
            # Teste falhou (erro n√£o foi tratado adequadamente)
            test_result = MutationTestResult(
                test_id=test_id,
                scenario_name=scenario_name,
                service=scenario.service,
                mutation_type=scenario.mutation_type,
                timestamp=timestamp,
                test_passed=False,
                error_handled=False,
                fallback_used=False,
                recovery_time_ms=0,
                error_message=str(e)
            )
        
        # Salva resultado
        self._save_test_result(test_result)
        
        logger.info(f"[{self.tracing_id}] Mutation test conclu√≠do: {scenario_name} - Passou: {test_result.test_passed}")
        
        return test_result
    
    def run_all_mutation_tests(self, test_function: Callable) -> List[MutationTestResult]:
        """
        Executa todos os testes de muta√ß√£o para uma fun√ß√£o de teste.
        
        Args:
            test_function: Fun√ß√£o de teste a ser executada
            
        Returns:
            Lista de resultados de mutation testing
        """
        logger.info(f"[{self.tracing_id}] Executando todos os mutation tests")
        
        results = []
        
        # Executa testes em paralelo
        with ThreadPoolExecutor(max_workers=5) as executor:
            future_to_scenario = {
                executor.submit(self.run_mutation_test, scenario.name, test_function): scenario.name
                for scenario in self.mutation_scenarios
            }
            
            for future in as_completed(future_to_scenario):
                scenario_name = future_to_scenario[future]
                try:
                    result = future.result()
                    results.append(result)
                except Exception as e:
                    logger.error(f"[{self.tracing_id}] Erro no mutation test {scenario_name}: {e}")
        
        return results
    
    def _save_test_result(self, result: MutationTestResult):
        """Salva resultado de teste no banco de dados."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO mutation_test_results (
                    test_id, scenario_name, service, mutation_type, timestamp,
                    test_passed, error_handled, fallback_used, recovery_time_ms,
                    error_message, tracing_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                result.test_id, result.scenario_name, result.service,
                result.mutation_type, result.timestamp.isoformat(),
                result.test_passed, result.error_handled, result.fallback_used,
                result.recovery_time_ms, result.error_message, result.tracing_id
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"[{self.tracing_id}] Erro ao salvar resultado: {e}")
    
    def generate_report(self) -> Dict[str, Any]:
        """
        Gera relat√≥rio completo de mutation testing.
        
        Returns:
            Relat√≥rio em formato JSON
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Estat√≠sticas gerais
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_tests,
                    SUM(CASE WHEN test_passed THEN 1 ELSE 0 END) as passed_tests,
                    SUM(CASE WHEN error_handled THEN 1 ELSE 0 END) as handled_errors,
                    AVG(recovery_time_ms) as avg_recovery_time
                FROM mutation_test_results
                WHERE timestamp >= datetime('now', '-24 hours')
            ''')
            
            stats = cursor.fetchone()
            
            # Cen√°rios por tipo
            cursor.execute('''
                SELECT mutation_type, COUNT(*) as test_count,
                       SUM(CASE WHEN test_passed THEN 1 ELSE 0 END) as passed_count
                FROM mutation_test_results
                WHERE timestamp >= datetime('now', '-24 hours')
                GROUP BY mutation_type
            ''')
            
            scenarios_by_type = [
                {
                    "type": row[0],
                    "total": row[1],
                    "passed": row[2],
                    "success_rate": row[2] / row[1] if row[1] > 0 else 0
                }
                for row in cursor.fetchall()
            ]
            
            # Servi√ßos mais problem√°ticos
            cursor.execute('''
                SELECT service, COUNT(*) as test_count,
                       SUM(CASE WHEN test_passed THEN 1 ELSE 0 END) as passed_count
                FROM mutation_test_results
                WHERE timestamp >= datetime('now', '-24 hours')
                GROUP BY service
                ORDER BY (test_count - passed_count) DESC
                LIMIT 5
            ''')
            
            problematic_services = [
                {
                    "service": row[0],
                    "total": row[1],
                    "passed": row[2],
                    "failed": row[1] - row[2],
                    "success_rate": row[2] / row[1] if row[1] > 0 else 0
                }
                for row in cursor.fetchall()
            ]
            
            conn.close()
            
            return {
                "tracing_id": self.tracing_id,
                "timestamp": datetime.now().isoformat(),
                "statistics": {
                    "total_tests_24h": stats[0] or 0,
                    "passed_tests_24h": stats[1] or 0,
                    "handled_errors_24h": stats[2] or 0,
                    "avg_recovery_time_ms": stats[3] or 0.0,
                    "success_rate": (stats[1] / stats[0] * 100) if stats[0] > 0 else 0
                },
                "scenarios_by_type": scenarios_by_type,
                "problematic_services": problematic_services,
                "services": [
                    {
                        "name": service.service_name,
                        "risk_score": service.risk_score,
                        "critical": service.critical,
                        "fallback_strategy": service.fallback_strategy
                    }
                    for service in self.services
                ]
            }
            
        except Exception as e:
            logger.error(f"[{self.tracing_id}] Erro ao gerar relat√≥rio: {e}")
            return {"error": str(e)}

# Inst√¢ncia global do framework
mutation_testing = MutationTestingFramework()

def run_mutation_test_for_scenario(scenario_name: str, test_function: Callable):
    """Executa mutation test para um cen√°rio espec√≠fico."""
    return mutation_testing.run_mutation_test(scenario_name, test_function)

def run_all_mutation_tests_for_function(test_function: Callable):
    """Executa todos os mutation tests para uma fun√ß√£o."""
    return mutation_testing.run_all_mutation_tests(test_function)

def get_mutation_testing_report():
    """Retorna relat√≥rio de mutation testing."""
    return mutation_testing.generate_report()

if __name__ == "__main__":
    # Teste do framework
    logger.info(f"[{TRACING_ID}] Testando framework de mutation testing")
    
    # Fun√ß√£o de teste de exemplo
    def test_example_function():
        """Fun√ß√£o de teste de exemplo."""
        # Simula chamada para servi√ßo externo
        response = requests.get("https://api.example.com/test", timeout=5)
        return response.json()
    
    # Executa mutation tests
    results = run_all_mutation_tests_for_function(test_example_function)
    
    # Gera relat√≥rio
    report = get_mutation_testing_report()
    
    print(json.dumps(report, indent=2)) 