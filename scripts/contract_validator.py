#!/usr/bin/env python3
"""
Script de valida√ß√£o autom√°tica de contratos entre backend e frontend.

Tracing ID: COMM_IMPL_20250128_001
Data/Hora: 2025-01-28T11:20:00Z
Prompt: Fullstack Communication Audit
Ruleset: Enterprise+ Standards
"""

import os
import sys
import json
import yaml
import logging
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Set, Tuple, Optional
from dataclasses import dataclass

# Configura√ß√£o de logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class ContractValidationResult:
    """Resultado da valida√ß√£o de contrato."""
    endpoint: str
    method: str
    is_implemented: bool
    is_documented: bool
    has_tests: bool
    performance_ok: bool
    security_ok: bool
    errors: List[str]
    warnings: List[str]

class ContractValidator:
    """
    Validador de contratos entre backend e frontend.
    
    Respons√°vel por:
    - Validar sincroniza√ß√£o entre documenta√ß√£o e implementa√ß√£o
    - Verificar cobertura de testes
    - Validar performance e seguran√ßa
    - Gerar relat√≥rios de conformidade
    """
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.openapi_spec = self.project_root / "docs" / "openapi.yaml"
        self.routes_file = self.project_root / "app" / "routes.py"
        self.tests_dir = self.project_root / "tests"
        self.ui_dir = self.project_root / "ui"
        
    def validate_all_contracts(self) -> Dict[str, ContractValidationResult]:
        """
        Valida todos os contratos do sistema.
        
        Returns:
            Dict[str, ContractValidationResult]: Resultados da valida√ß√£o
        """
        logger.info("üîç Iniciando valida√ß√£o completa de contratos")
        
        # Carrega especifica√ß√£o OpenAPI
        spec = self._load_openapi_spec()
        if not spec:
            return {}
        
        # Obt√©m endpoints implementados
        implemented_endpoints = self._get_implemented_endpoints()
        
        # Obt√©m endpoints testados
        tested_endpoints = self._get_tested_endpoints()
        
        # Valida cada endpoint
        results = {}
        
        for path, methods in spec['paths'].items():
            for method, operation in methods.items():
                endpoint_key = f"{method.upper()} {path}"
                
                result = self._validate_single_contract(
                    endpoint_key, path, method, operation,
                    implemented_endpoints, tested_endpoints
                )
                
                results[endpoint_key] = result
        
        logger.info(f"‚úÖ Valida√ß√£o conclu√≠da: {len(results)} endpoints analisados")
        return results
    
    def _load_openapi_spec(self) -> Dict:
        """Carrega especifica√ß√£o OpenAPI."""
        try:
            with open(self.openapi_spec, 'r') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar especifica√ß√£o OpenAPI: {e}")
            return {}
    
    def _get_implemented_endpoints(self) -> Set[str]:
        """Obt√©m conjunto de endpoints implementados."""
        implemented = set()
        
        try:
            if not self.routes_file.exists():
                logger.warning("‚ö†Ô∏è Arquivo routes.py n√£o encontrado")
                return implemented
            
            with open(self.routes_file, 'r') as f:
                content = f.read()
            
            # Extrai rotas usando regex
            import re
            route_pattern = r'@routes_bp\.route\([\'"]([^\'"]+)[\'"],\s*methods=\[[^\]]*[\'"]([^\'"]+)[\'"]'
            matches = re.findall(route_pattern, content)
            
            for path, method in matches:
                implemented.add(f"{method.upper()} {path}")
            
            logger.info(f"üìã {len(implemented)} endpoints implementados encontrados")
            return implemented
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar endpoints implementados: {e}")
            return set()
    
    def _get_tested_endpoints(self) -> Set[str]:
        """Obt√©m conjunto de endpoints testados."""
        tested = set()
        
        try:
            # Procura por testes de integra√ß√£o
            integration_tests = self.tests_dir / "integration"
            if integration_tests.exists():
                for test_file in integration_tests.glob("*.py"):
                    with open(test_file, 'r') as f:
                        content = f.read()
                    
                    # Extrai endpoints testados
                    import re
                    test_patterns = [
                        r'client\.(get|post|put|delete)\([\'"]([^\'"]+)[\'"]',
                        r'requests\.(get|post|put|delete)\([\'"]([^\'"]+)[\'"]',
                        r'response\s*=\s*.*\.(get|post|put|delete)\([\'"]([^\'"]+)[\'"]'
                    ]
                    
                    for pattern in test_patterns:
                        matches = re.findall(pattern, content)
                        for method, path in matches:
                            tested.add(f"{method.upper()} {path}")
            
            logger.info(f"üß™ {len(tested)} endpoints testados encontrados")
            return tested
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar endpoints testados: {e}")
            return set()
    
    def _validate_single_contract(
        self, endpoint_key: str, path: str, method: str, 
        operation: Dict, implemented_endpoints: Set[str], 
        tested_endpoints: Set[str]
    ) -> ContractValidationResult:
        """Valida contrato de um endpoint espec√≠fico."""
        errors = []
        warnings = []
        
        # Verifica implementa√ß√£o
        is_implemented = endpoint_key in implemented_endpoints
        if not is_implemented:
            errors.append("Endpoint documentado mas n√£o implementado")
        
        # Verifica testes
        is_tested = endpoint_key in tested_endpoints
        if not is_tested:
            warnings.append("Endpoint n√£o possui testes de integra√ß√£o")
        
        # Verifica documenta√ß√£o
        is_documented = bool(operation.get('summary') or operation.get('description'))
        if not is_documented:
            warnings.append("Endpoint n√£o possui documenta√ß√£o adequada")
        
        # Verifica performance (simula√ß√£o)
        performance_ok = self._check_performance_requirements(operation)
        if not performance_ok:
            warnings.append("Endpoint pode ter problemas de performance")
        
        # Verifica seguran√ßa
        security_ok = self._check_security_requirements(operation)
        if not security_ok:
            errors.append("Endpoint n√£o atende requisitos de seguran√ßa")
        
        return ContractValidationResult(
            endpoint=path,
            method=method,
            is_implemented=is_implemented,
            is_documented=is_documented,
            has_tests=is_tested,
            performance_ok=performance_ok,
            security_ok=security_ok,
            errors=errors,
            warnings=warnings
        )
    
    def _check_performance_requirements(self, operation: Dict) -> bool:
        """Verifica requisitos de performance."""
        # Simula√ß√£o de verifica√ß√£o de performance
        # Em um cen√°rio real, isso seria baseado em m√©tricas reais
        
        # Verifica se tem rate limiting
        has_rate_limiting = 'x-rate-limit' in str(operation)
        
        # Verifica se tem cache headers
        has_cache = 'cache-control' in str(operation)
        
        # Verifica se √© endpoint cr√≠tico
        is_critical = any(keyword in str(operation).lower() 
                         for keyword in ['generate', 'process', 'upload'])
        
        if is_critical and not has_rate_limiting:
            return False
        
        return True
    
    def _check_security_requirements(self, operation: Dict) -> bool:
        """Verifica requisitos de seguran√ßa."""
        # Verifica se tem autentica√ß√£o
        has_auth = 'security' in operation or 'BearerAuth' in str(operation)
        
        # Verifica se √© endpoint sens√≠vel
        is_sensitive = any(keyword in str(operation).lower() 
                          for keyword in ['admin', 'user', 'token', 'password'])
        
        if is_sensitive and not has_auth:
            return False
        
        return True
    
    def generate_report(self, results: Dict[str, ContractValidationResult]) -> str:
        """Gera relat√≥rio de valida√ß√£o."""
        total_endpoints = len(results)
        implemented = sum(1 for r in results.values() if r.is_implemented)
        tested = sum(1 for r in results.values() if r.has_tests)
        documented = sum(1 for r in results.values() if r.is_documented)
        secure = sum(1 for r in results.values() if r.security_ok)
        performant = sum(1 for r in results.values() if r.performance_ok)
        
        errors = sum(len(r.errors) for r in results.values())
        warnings = sum(len(r.warnings) for r in results.values())
        
        report = f"""
# üìã RELAT√ìRIO DE VALIDA√á√ÉO DE CONTRATOS

**Tracing ID**: COMM_IMPL_20250128_001  
**Data/Hora**: {datetime.now().isoformat()}  
**Status**: {'‚úÖ CONFORME' if errors == 0 else '‚ùå N√ÉO CONFORME'}

## üìä M√âTRICAS GERAIS

- **Total de Endpoints**: {total_endpoints}
- **Implementados**: {implemented} ({implemented/total_endpoints*100:.1f}%)
- **Testados**: {tested} ({tested/total_endpoints*100:.1f}%)
- **Documentados**: {documented} ({documented/total_endpoints*100:.1f}%)
- **Seguros**: {secure} ({secure/total_endpoints*100:.1f}%)
- **Perform√°ticos**: {performant} ({performant/total_endpoints*100:.1f}%)

## ‚ö†Ô∏è PROBLEMAS ENCONTRADOS

- **Erros**: {errors}
- **Avisos**: {warnings}

## üìã DETALHAMENTO POR ENDPOINT

"""
        
        for endpoint_key, result in results.items():
            status = "‚úÖ" if not result.errors else "‚ùå"
            report += f"\n### {status} {endpoint_key}\n"
            
            if result.errors:
                report += "**Erros:**\n"
                for error in result.errors:
                    report += f"- ‚ùå {error}\n"
            
            if result.warnings:
                report += "**Avisos:**\n"
                for warning in result.warnings:
                    report += f"- ‚ö†Ô∏è {warning}\n"
            
            report += f"- Implementado: {'‚úÖ' if result.is_implemented else '‚ùå'}\n"
            report += f"- Testado: {'‚úÖ' if result.has_tests else '‚ùå'}\n"
            report += f"- Documentado: {'‚úÖ' if result.is_documented else '‚ùå'}\n"
            report += f"- Seguro: {'‚úÖ' if result.security_ok else '‚ùå'}\n"
            report += f"- Perform√°tico: {'‚úÖ' if result.performance_ok else '‚ùå'}\n"
        
        return report
    
    def save_report(self, report: str, filename: Optional[str] = None):
        """Salva relat√≥rio em arquivo."""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"contract_validation_report_{timestamp}.md"
        
        report_path = self.project_root / "docs" / "reports" / filename
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f"üìÑ Relat√≥rio salvo em: {report_path}")
        return report_path

def main():
    """Fun√ß√£o principal do script."""
    validator = ContractValidator()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "validate":
            results = validator.validate_all_contracts()
            report = validator.generate_report(results)
            print(report)
            
            # Salva relat√≥rio
            validator.save_report(report)
            
            # Retorna c√≥digo de sa√≠da baseado em erros
            total_errors = sum(len(r.errors) for r in results.values())
            sys.exit(0 if total_errors == 0 else 1)
        
        elif command == "report":
            results = validator.validate_all_contracts()
            report = validator.generate_report(results)
            validator.save_report(report)
            print("üìÑ Relat√≥rio gerado com sucesso")
            sys.exit(0)
        
        else:
            print("Comandos dispon√≠veis: validate, report")
            sys.exit(1)
    else:
        # Executa valida√ß√£o por padr√£o
        results = validator.validate_all_contracts()
        report = validator.generate_report(results)
        print(report)
        
        # Salva relat√≥rio
        validator.save_report(report)
        
        # Retorna c√≥digo de sa√≠da
        total_errors = sum(len(r.errors) for r in results.values())
        sys.exit(0 if total_errors == 0 else 1)

if __name__ == "__main__":
    main() 