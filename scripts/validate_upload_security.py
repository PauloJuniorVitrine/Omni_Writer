#!/usr/bin/env python3
"""
Script de Valida√ß√£o - Upload Security System
============================================

Valida o sistema de prote√ß√£o contra uploads maliciosos.
Verifica configura√ß√µes, detec√ß√£o de malware e sanitiza√ß√£o.

Prompt: Script de valida√ß√£o para seguran√ßa de uploads
Ruleset: enterprise_control_layer.yaml
Data/Hora: 2025-01-27T10:30:00Z
"""

import os
import sys
import logging
import tempfile
from datetime import datetime
import json

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def setup_logging():
    """Configura logging para valida√ß√£o."""
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] [%(levelname)s] [validation] %(message)s',
        handlers=[
            logging.FileHandler('logs/exec_trace/upload_security_validation.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def validate_imports():
    """Valida se todas as depend√™ncias est√£o dispon√≠veis."""
    logger = logging.getLogger(__name__)
    
    required_modules = [
        'magic',
        'bleach',
        'shared.upload_security',
        'werkzeug.datastructures'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ M√≥dulo {module} dispon√≠vel")
        except ImportError as e:
            logger.error(f"‚ùå M√≥dulo {module} n√£o dispon√≠vel: {e}")
            missing_modules.append(module)
    
    return len(missing_modules) == 0

def validate_upload_security_service():
    """Valida o servi√ßo de seguran√ßa de uploads."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import UploadSecurityValidator, get_upload_stats
        
        # Testa cria√ß√£o do servi√ßo
        validator = UploadSecurityValidator()
        
        # Testa obten√ß√£o de estat√≠sticas
        stats = get_upload_stats()
        
        logger.info(f"‚úÖ Servi√ßo de seguran√ßa de uploads criado com sucesso")
        logger.info(f"üìä Estat√≠sticas: {json.dumps(stats, indent=2)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no servi√ßo de seguran√ßa de uploads: {e}")
        return False

def validate_file_extension_validation():
    """Valida valida√ß√£o de extens√µes de arquivo."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import UploadSecurityValidator
        
        validator = UploadSecurityValidator()
        
        # Testa extens√µes v√°lidas
        valid_extensions = ['test.txt', 'data.csv', 'prompts.txt']
        for ext in valid_extensions:
            is_valid, error = validator._validate_file_extension(ext)
            if not is_valid:
                logger.error(f"‚ùå Extens√£o v√°lida rejeitada: {ext}")
                return False
        
        # Testa extens√µes inv√°lidas
        invalid_extensions = ['test.exe', 'script.js', 'malware.bat']
        for ext in invalid_extensions:
            is_valid, error = validator._validate_file_extension(ext)
            if is_valid:
                logger.error(f"‚ùå Extens√£o inv√°lida aceita: {ext}")
                return False
        
        logger.info("‚úÖ Valida√ß√£o de extens√µes funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o de extens√µes: {e}")
        return False

def validate_file_size_validation():
    """Valida valida√ß√£o de tamanho de arquivo."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import UploadSecurityValidator, MAX_FILE_SIZE
        from werkzeug.datastructures import FileStorage
        from io import BytesIO
        
        validator = UploadSecurityValidator()
        
        # Testa arquivo pequeno
        small_content = b"Linha 1\nLinha 2\nLinha 3"
        small_file = FileStorage(
            stream=BytesIO(small_content),
            filename="small.txt",
            content_type="text/plain"
        )
        small_file.content_length = len(small_content)
        
        is_valid, error = validator._validate_file_size(small_file)
        if not is_valid:
            logger.error(f"‚ùå Arquivo pequeno rejeitado: {error}")
            return False
        
        # Testa arquivo grande
        large_content = b"x" * (MAX_FILE_SIZE + 1024)
        large_file = FileStorage(
            stream=BytesIO(large_content),
            filename="large.txt",
            content_type="text/plain"
        )
        large_file.content_length = len(large_content)
        
        is_valid, error = validator._validate_file_size(large_file)
        if is_valid:
            logger.error(f"‚ùå Arquivo grande aceito")
            return False
        
        logger.info("‚úÖ Valida√ß√£o de tamanho funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o de tamanho: {e}")
        return False

def validate_malicious_content_detection():
    """Valida detec√ß√£o de conte√∫do malicioso."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import UploadSecurityValidator
        
        validator = UploadSecurityValidator()
        
        # Testa conte√∫do seguro
        safe_content = "Texto normal sem conte√∫do malicioso"
        result = validator._detect_malicious_content(safe_content)
        if result is not None:
            logger.error(f"‚ùå Conte√∫do seguro detectado como malicioso: {result}")
            return False
        
        # Testa conte√∫do malicioso
        malicious_patterns = [
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<iframe src='malicious.com'></iframe>",
            "<object data='malware.swf'></object>",
            "onclick=alert('xss')",
            "data:text/html,<script>alert('xss')</script>"
        ]
        
        for pattern in malicious_patterns:
            result = validator._detect_malicious_content(pattern)
            if result is None:
                logger.error(f"‚ùå Conte√∫do malicioso n√£o detectado: {pattern}")
                return False
        
        logger.info("‚úÖ Detec√ß√£o de conte√∫do malicioso funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na detec√ß√£o de conte√∫do malicioso: {e}")
        return False

def validate_content_sanitization():
    """Valida sanitiza√ß√£o de conte√∫do."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import UploadSecurityValidator
        
        validator = UploadSecurityValidator()
        
        # Testa sanitiza√ß√£o de HTML
        html_content = "Texto <b>negrito</b> e <script>malicioso</script>"
        sanitized = validator._sanitize_content(html_content)
        
        if "<b>" in sanitized or "<script>" in sanitized:
            logger.error(f"‚ùå Tags HTML n√£o removidas: {sanitized}")
            return False
        
        if "negrito" not in sanitized or "malicioso" not in sanitized:
            logger.error(f"‚ùå Conte√∫do v√°lido removido: {sanitized}")
            return False
        
        # Testa sanitiza√ß√£o de caracteres de controle
        control_content = "Texto\x00normal\x01com\x02controle"
        sanitized = validator._sanitize_content(control_content)
        
        if "\x00" in sanitized or "\x01" in sanitized or "\x02" in sanitized:
            logger.error(f"‚ùå Caracteres de controle n√£o removidos")
            return False
        
        logger.info("‚úÖ Sanitiza√ß√£o de conte√∫do funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na sanitiza√ß√£o de conte√∫do: {e}")
        return False

def validate_integration():
    """Valida integra√ß√£o completa do sistema."""
    logger = logging.getLogger(__name__)
    
    try:
        from shared.upload_security import validate_upload
        from werkzeug.datastructures import FileStorage
        from io import BytesIO
        
        # Testa upload v√°lido
        valid_content = b"Linha 1\nLinha 2\nLinha 3"
        valid_file = FileStorage(
            stream=BytesIO(valid_content),
            filename="valid.txt",
            content_type="text/plain"
        )
        valid_file.content_length = len(valid_content)
        
        with tempfile.NamedTemporaryFile(mode='w+b', suffix='.txt') as temp_file:
            temp_file.write(valid_content)
            temp_file.seek(0)
            
            is_valid, error, metadata = validate_upload(valid_file, "192.168.1.100")
            
            if not is_valid:
                logger.error(f"‚ùå Upload v√°lido rejeitado: {error}")
                return False
            
            if metadata['line_count'] != 3:
                logger.error(f"‚ùå Metadados incorretos: {metadata}")
                return False
        
        # Testa upload malicioso
        malicious_content = b"Texto <script>alert('xss')</script>"
        malicious_file = FileStorage(
            stream=BytesIO(malicious_content),
            filename="malicious.txt",
            content_type="text/plain"
        )
        malicious_file.content_length = len(malicious_content)
        
        is_valid, error, metadata = validate_upload(malicious_file, "192.168.1.100")
        
        if is_valid:
            logger.error(f"‚ùå Upload malicioso aceito")
            return False
        
        logger.info("‚úÖ Integra√ß√£o completa funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na integra√ß√£o: {e}")
        return False

def validate_logging():
    """Valida sistema de logging."""
    logger = logging.getLogger(__name__)
    
    try:
        import logging
        
        # Verifica se o logger de upload security existe
        upload_logger = logging.getLogger("upload_security")
        
        assert upload_logger.level == logging.INFO
        assert len(upload_logger.handlers) > 0
        
        # Testa escrita de log
        test_message = f"Teste de logging - {datetime.utcnow().isoformat()}"
        upload_logger.info(test_message)
        
        logger.info("‚úÖ Sistema de logging funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no sistema de logging: {e}")
        return False

def validate_file_structure():
    """Valida estrutura de arquivos necess√°ria."""
    logger = logging.getLogger(__name__)
    
    required_files = [
        'shared/upload_security.py',
        'logs/exec_trace/'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
            logger.error(f"‚ùå Arquivo/diret√≥rio n√£o encontrado: {file_path}")
        else:
            logger.info(f"‚úÖ Arquivo/diret√≥rio encontrado: {file_path}")
    
    return len(missing_files) == 0

def run_validation():
    """Executa todas as valida√ß√µes."""
    logger = setup_logging()
    
    logger.info("üöÄ Iniciando valida√ß√£o do sistema de seguran√ßa de uploads")
    logger.info("=" * 60)
    
    validations = [
        ("Estrutura de arquivos", validate_file_structure),
        ("Importa√ß√µes", validate_imports),
        ("Servi√ßo de seguran√ßa", validate_upload_security_service),
        ("Valida√ß√£o de extens√µes", validate_file_extension_validation),
        ("Valida√ß√£o de tamanho", validate_file_size_validation),
        ("Detec√ß√£o de conte√∫do malicioso", validate_malicious_content_detection),
        ("Sanitiza√ß√£o de conte√∫do", validate_content_sanitization),
        ("Integra√ß√£o completa", validate_integration),
        ("Sistema de logging", validate_logging)
    ]
    
    results = []
    
    for name, validation_func in validations:
        logger.info(f"\nüîç Validando: {name}")
        try:
            result = validation_func()
            results.append((name, result))
            if result:
                logger.info(f"‚úÖ {name}: OK")
            else:
                logger.error(f"‚ùå {name}: FALHOU")
        except Exception as e:
            logger.error(f"‚ùå {name}: ERRO - {e}")
            results.append((name, False))
    
    # Resumo final
    logger.info("\n" + "=" * 60)
    logger.info("üìã RESUMO DA VALIDA√á√ÉO")
    logger.info("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{status} - {name}")
    
    logger.info(f"\nüìä Resultado: {passed}/{total} valida√ß√µes passaram")
    
    if passed == total:
        logger.info("üéâ TODAS AS VALIDA√á√ïES PASSARAM!")
        return True
    else:
        logger.error("‚ö†Ô∏è ALGUMAS VALIDA√á√ïES FALHARAM!")
        return False

if __name__ == "__main__":
    success = run_validation()
    sys.exit(0 if success else 1) 