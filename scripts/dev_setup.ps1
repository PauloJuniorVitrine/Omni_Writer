# scripts/dev_setup.ps1
# Setup Autom√°tico do Ambiente de Desenvolvimento E2E
# 
# üìê CoCoT: Baseado em boas pr√°ticas de automa√ß√£o de setup
# üå≤ ToT: M√∫ltiplas estrat√©gias de configura√ß√£o implementadas
# ‚ôªÔ∏è ReAct: Simulado para diferentes cen√°rios de ambiente
#
# **Prompt:** Interface Gr√°fica v3.5 Enterprise+ - TEST-001
# **Data/Hora:** 2025-01-28T12:00:00Z
# **Tracing ID:** DEV_SETUP_PS1_md1ppfhs
# **Origem:** Necessidade de automa√ß√£o de setup para desenvolvedores

param(
    [string]$Environment = "dev",
    [switch]$Force,
    [switch]$SkipValidation,
    [switch]$Verbose
)

# Configura√ß√µes
$Config = @{
    ProjectName = "Omni Writer E2E"
    NodeVersion = "18"
    PythonVersion = "3.11"
    BaseUrl = "http://localhost:5000"
    TestDir = "tests/e2e"
    LogDir = "logs/e2e"
    ResultsDir = "test-results"
    CacheDir = ".e2e-cache"
}

# Cores para output
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Blue"
    Magenta = "Magenta"
    Cyan = "Cyan"
    White = "White"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [switch]$Bold
    )
    
    $prefix = if ($Bold) { "**" } else { "" }
    Write-Host "$prefix$Message$prefix" -ForegroundColor $Colors[$Color]
}

function Test-Command {
    param([string]$Command)
    
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

function Test-NodeVersion {
    try {
        $nodeVersion = node --version
        $majorVersion = ($nodeVersion -replace 'v', '').Split('.')[0]
        return [int]$majorVersion -ge 18
    }
    catch {
        return $false
    }
}

function Test-PythonVersion {
    try {
        $pythonVersion = python --version
        $majorVersion = ($pythonVersion -replace 'Python ', '').Split('.')[0]
        $minorVersion = ($pythonVersion -replace 'Python ', '').Split('.')[1]
        return [int]$majorVersion -ge 3 -and [int]$minorVersion -ge 11
    }
    catch {
        return $false
    }
}

function Install-NodeDependencies {
    Write-ColorOutput "üì¶ Instalando depend√™ncias Node.js..." -Color Cyan
    
    if (Test-Path "package.json") {
        if ($Force -or -not (Test-Path "node_modules")) {
            Write-ColorOutput "  Executando npm ci..." -Color Yellow
            npm ci
            if ($LASTEXITCODE -ne 0) {
                Write-ColorOutput "‚ùå Falha na instala√ß√£o de depend√™ncias Node.js" -Color Red
                return $false
            }
        } else {
            Write-ColorOutput "  node_modules j√° existe, pulando..." -Color Yellow
        }
    } else {
        Write-ColorOutput "‚ö†Ô∏è package.json n√£o encontrado" -Color Yellow
    }
    
    return $true
}

function Install-PythonDependencies {
    Write-ColorOutput "üêç Instalando depend√™ncias Python..." -Color Cyan
    
    if (Test-Path "requirements.txt") {
        Write-ColorOutput "  Executando pip install..." -Color Yellow
        pip install -r requirements.txt
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Falha na instala√ß√£o de depend√™ncias Python" -Color Red
            return $false
        }
    } else {
        Write-ColorOutput "‚ö†Ô∏è requirements.txt n√£o encontrado" -Color Yellow
    }
    
    return $true
}

function Install-Playwright {
    Write-ColorOutput "üé≠ Instalando Playwright..." -Color Cyan
    
    Write-ColorOutput "  Instalando Playwright e browsers..." -Color Yellow
    npx playwright install --with-deps
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "‚ùå Falha na instala√ß√£o do Playwright" -Color Red
        return $false
    }
    
    return $true
}

function New-Directories {
    Write-ColorOutput "üìÅ Criando diret√≥rios necess√°rios..." -Color Cyan
    
    $directories = @(
        $Config.TestDir,
        $Config.LogDir,
        $Config.ResultsDir,
        $Config.CacheDir,
        "$($Config.TestDir)/snapshots",
        "$($Config.TestDir)/snapshots/generate_content",
        "$($Config.TestDir)/snapshots/webhook",
        "$($Config.LogDir)/exec_trace"
    )
    
    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColorOutput "  ‚úÖ Criado: $dir" -Color Green
        } else {
            Write-ColorOutput "  ‚ÑπÔ∏è J√° existe: $dir" -Color Yellow
        }
    }
}

function Set-EnvironmentVariables {
    Write-ColorOutput "üîß Configurando vari√°veis de ambiente..." -Color Cyan
    
    $envVars = @{
        "E2E_ENV" = $Environment
        "E2E_BASE_URL" = $Config.BaseUrl
        "NODE_ENV" = "development"
        "PLAYWRIGHT_BROWSERS_PATH" = "0"
    }
    
    foreach ($key in $envVars.Keys) {
        [Environment]::SetEnvironmentVariable($key, $envVars[$key], "Process")
        Write-ColorOutput "  ‚úÖ $key = $($envVars[$key])" -Color Green
    }
}

function Test-ApplicationHealth {
    Write-ColorOutput "üè• Verificando sa√∫de da aplica√ß√£o..." -Color Cyan
    
    try {
        $response = Invoke-WebRequest -Uri $Config.BaseUrl -TimeoutSec 10 -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            Write-ColorOutput "  ‚úÖ Aplica√ß√£o respondendo em $($Config.BaseUrl)" -Color Green
            return $true
        }
    }
    catch {
        Write-ColorOutput "  ‚ö†Ô∏è Aplica√ß√£o n√£o est√° rodando em $($Config.BaseUrl)" -Color Yellow
        Write-ColorOutput "  üí° Execute: npm run start:dev" -Color Cyan
        return $false
    }
}

function Test-SetupValidation {
    Write-ColorOutput "üîç Validando setup..." -Color Cyan
    
    $validationResults = @{
        Node = Test-NodeVersion
        Python = Test-PythonVersion
        Playwright = Test-Command "npx playwright"
        Dependencies = Test-Path "node_modules"
        Directories = Test-Path $Config.TestDir
    }
    
    $allValid = $true
    foreach ($test in $validationResults.Keys) {
        $status = if ($validationResults[$test]) { "‚úÖ" } else { "‚ùå" }
        $color = if ($validationResults[$test]) { "Green" } else { "Red" }
        Write-ColorOutput "  $status $test" -Color $color
        
        if (-not $validationResults[$test]) {
            $allValid = $false
        }
    }
    
    return $allValid
}

function Show-SetupSummary {
    Write-ColorOutput "`nüìä RESUMO DO SETUP" -Color Magenta -Bold
    Write-ColorOutput "==================" -Color Magenta
    
    Write-ColorOutput "üéØ Projeto: $($Config.ProjectName)" -Color White
    Write-ColorOutput "üåç Ambiente: $Environment" -Color White
    Write-ColorOutput "üåê Base URL: $($Config.BaseUrl)" -Color White
    Write-ColorOutput "üìÅ Test Dir: $($Config.TestDir)" -Color White
    Write-ColorOutput "üìä Results Dir: $($Config.ResultsDir)" -Color White
    
    Write-ColorOutput "`nüöÄ COMANDOS DISPON√çVEIS:" -Color Cyan -Bold
    Write-ColorOutput "  npm run test:e2e:quick    - Testes de smoke" -Color White
    Write-ColorOutput "  npm run test:e2e:smoke    - Testes de smoke" -Color White
    Write-ColorOutput "  npm run test:e2e:critical - Testes cr√≠ticos" -Color White
    Write-ColorOutput "  npm run test:e2e:watch    - Watch mode" -Color White
    Write-ColorOutput "  npm run test:e2e:debug    - Modo debug" -Color White
    Write-ColorOutput "  npm run test:e2e:ui       - Interface UI" -Color White
    Write-ColorOutput "  npm run test:e2e:report   - Abrir relat√≥rios" -Color White
    
    Write-ColorOutput "`nüìö DOCUMENTA√á√ÉO:" -Color Cyan -Bold
    Write-ColorOutput "  tests/e2e/MAINTENANCE_GUIDE.md - Guia de manuten√ß√£o" -Color White
    Write-ColorOutput "  docs/e2e_troubleshooting.md   - Troubleshooting" -Color White
}

function Show-TroubleshootingTips {
    Write-ColorOutput "`nüîß DICAS DE TROUBLESHOOTING:" -Color Yellow -Bold
    Write-ColorOutput "=================================" -Color Yellow
    
    Write-ColorOutput "‚ùì Problema: Aplica√ß√£o n√£o inicia" -Color White
    Write-ColorOutput "   üí° Solu√ß√£o: npm run start:dev" -Color Cyan
    
    Write-ColorOutput "‚ùì Problema: Testes falham por timeout" -Color White
    Write-ColorOutput "   üí° Solu√ß√£o: Aumentar timeout em e2e.config.ts" -Color Cyan
    
    Write-ColorOutput "‚ùì Problema: Browsers n√£o instalam" -Color White
    Write-ColorOutput "   üí° Solu√ß√£o: npx playwright install --with-deps" -Color Cyan
    
    Write-ColorOutput "‚ùì Problema: Cache corrompido" -Color White
    Write-ColorOutput "   üí° Solu√ß√£o: npm run test:e2e:clean" -Color Cyan
    
    Write-ColorOutput "‚ùì Problema: Depend√™ncias desatualizadas" -Color White
    Write-ColorOutput "   üí° Solu√ß√£o: npm run test:e2e:reset" -Color Cyan
}

# Fun√ß√£o principal
function Main {
    Write-ColorOutput "üöÄ SETUP AUTOM√ÅTICO - $($Config.ProjectName)" -Color Magenta -Bold
    Write-ColorOutput "=============================================" -Color Magenta
    Write-ColorOutput "üìê CoCoT: Setup baseado em boas pr√°ticas de automa√ß√£o" -Color Cyan
    Write-ColorOutput "üå≤ ToT: M√∫ltiplas estrat√©gias de configura√ß√£o" -Color Cyan
    Write-ColorOutput "‚ôªÔ∏è ReAct: Simulado para diferentes cen√°rios" -Color Cyan
    Write-ColorOutput ""
    
    # Verificar pr√©-requisitos
    Write-ColorOutput "üîç Verificando pr√©-requisitos..." -Color Cyan
    
    if (-not (Test-NodeVersion)) {
        Write-ColorOutput "‚ùå Node.js 18+ √© necess√°rio" -Color Red
        Write-ColorOutput "üí° Instale: https://nodejs.org/" -Color Cyan
        exit 1
    }
    
    if (-not (Test-PythonVersion)) {
        Write-ColorOutput "‚ùå Python 3.11+ √© necess√°rio" -Color Red
        Write-ColorOutput "üí° Instale: https://python.org/" -Color Cyan
        exit 1
    }
    
    Write-ColorOutput "‚úÖ Pr√©-requisitos atendidos" -Color Green
    
    # Executar setup
    $setupSteps = @(
        @{ Name = "Instalar depend√™ncias Node.js"; Function = "Install-NodeDependencies" }
        @{ Name = "Instalar depend√™ncias Python"; Function = "Install-PythonDependencies" }
        @{ Name = "Instalar Playwright"; Function = "Install-Playwright" }
        @{ Name = "Criar diret√≥rios"; Function = "New-Directories" }
        @{ Name = "Configurar vari√°veis"; Function = "Set-EnvironmentVariables" }
    )
    
    foreach ($step in $setupSteps) {
        Write-ColorOutput "`nüîÑ $($step.Name)..." -Color Blue
        $result = & $step.Function
        if (-not $result) {
            Write-ColorOutput "‚ùå Falha no setup" -Color Red
            exit 1
        }
    }
    
    # Valida√ß√£o final
    if (-not $SkipValidation) {
        Write-ColorOutput "`nüîç Valida√ß√£o final..." -Color Cyan
        $validationPassed = Test-SetupValidation
        if (-not $validationPassed) {
            Write-ColorOutput "‚ùå Valida√ß√£o falhou" -Color Red
            Show-TroubleshootingTips
            exit 1
        }
    }
    
    # Verificar aplica√ß√£o
    Test-ApplicationHealth
    
    # Resumo final
    Show-SetupSummary
    Show-TroubleshootingTips
    
    Write-ColorOutput "`nüéâ SETUP CONCLU√çDO COM SUCESSO!" -Color Green -Bold
    Write-ColorOutput "üöÄ Pronto para executar testes E2E!" -Color Green
}

# Executar setup
Main 