#!/usr/bin/env python3
"""
Watch Mode para Desenvolvimento E2E
- Hot reload de testes
- Execu√ß√£o autom√°tica em mudan√ßas
- Filtros inteligentes
- Notifica√ß√µes em tempo real

üìê CoCoT: Baseado em boas pr√°ticas de watch mode para desenvolvimento
üå≤ ToT: M√∫ltiplas estrat√©gias de monitoramento implementadas
‚ôªÔ∏è ReAct: Simulado para diferentes cen√°rios de desenvolvimento

**Prompt:** Interface Gr√°fica v3.5 Enterprise+ - TEST-001
**Data/Hora:** 2025-01-28T12:00:00Z
**Tracing ID:** WATCH_MODE_DEVELOPMENT_md1ppfhs
**Origem:** Necessidade de watch mode para desenvolvimento eficiente de testes E2E
"""

import os
import time
import json
import subprocess
import argparse
from pathlib import Path
from typing import Dict, List, Set, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

@dataclass
class WatchConfig:
    """Configura√ß√£o do watch mode"""
    test_dir: str = 'tests/e2e'
    app_dir: str = 'app'
    ui_dir: str = 'ui'
    shared_dir: str = 'shared'
    debounce_time: float = 2.0
    auto_run: bool = True
    notifications: bool = True
    parallel: bool = True
    browser: str = 'chromium'

@dataclass
class FileChange:
    """Mudan√ßa de arquivo detectada"""
    path: str
    event_type: str  # 'created', 'modified', 'deleted'
    timestamp: datetime
    file_type: str  # 'test', 'app', 'ui', 'shared', 'config'

class E2EWatchMode:
    """Watch mode para desenvolvimento E2E"""
    
    def __init__(self, config: WatchConfig):
        self.config = config
        self.observer = Observer()
        self.last_run = datetime.now()
        self.debounce_timer = None
        self.running_tests = False
        self.changed_files: Set[str] = set()
        
        # Configurar diret√≥rios para monitorar
        self.watch_dirs = [
            self.config.test_dir,
            self.config.app_dir,
            self.config.ui_dir,
            self.config.shared_dir
        ]
        
        # Configurar filtros de arquivos
        self.test_patterns = ['*.spec.ts', '*.test.ts', '*.spec.js', '*.test.js']
        self.app_patterns = ['*.py', '*.js', '*.ts', '*.json', '*.yaml', '*.yml']
        self.config_patterns = ['playwright.config.ts', 'package.json', 'requirements.txt']
        
        # Hist√≥rico de execu√ß√µes
        self.execution_history: List[Dict[str, Any]] = []
    
    def start(self) -> None:
        """Iniciar watch mode"""
        print("üëÄ Iniciando Watch Mode para E2E...")
        print(f"üìÅ Monitorando: {', '.join(self.watch_dirs)}")
        print(f"‚ö° Debounce: {self.config.debounce_time}s")
        print(f"üîÑ Auto-run: {'Sim' if self.config.auto_run else 'N√£o'}")
        print(f"üåê Browser: {self.config.browser}")
        print("=" * 60)
        
        # Configurar event handler
        event_handler = E2EFileHandler(self)
        
        # Adicionar observadores para cada diret√≥rio
        for directory in self.watch_dirs:
            if Path(directory).exists():
                self.observer.schedule(event_handler, directory, recursive=True)
                print(f"üëÅÔ∏è Monitorando: {directory}")
            else:
                print(f"‚ö†Ô∏è Diret√≥rio n√£o encontrado: {directory}")
        
        # Iniciar observer
        self.observer.start()
        
        try:
            # Loop principal
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Watch mode interrompido pelo usu√°rio")
            self.stop()
    
    def stop(self) -> None:
        """Parar watch mode"""
        print("üõë Parando watch mode...")
        self.observer.stop()
        self.observer.join()
        
        # Gerar relat√≥rio final
        self._generate_watch_report()
    
    def on_file_change(self, file_path: str, event_type: str) -> None:
        """Processar mudan√ßa de arquivo"""
        file_type = self._get_file_type(file_path)
        
        change = FileChange(
            path=file_path,
            event_type=event_type,
            timestamp=datetime.now(),
            file_type=file_type
        )
        
        print(f"üìù {event_type.upper()}: {file_path} ({file_type})")
        
        # Adicionar √† lista de mudan√ßas
        self.changed_files.add(file_path)
        
        # Debounce para evitar execu√ß√µes excessivas
        if self.config.auto_run:
            self._schedule_test_run()
    
    def _get_file_type(self, file_path: str) -> str:
        """Determinar tipo do arquivo"""
        path = Path(file_path)
        
        # Verificar se √© arquivo de teste
        if any(path.match(pattern) for pattern in self.test_patterns):
            return 'test'
        
        # Verificar se √© arquivo de configura√ß√£o
        if any(path.match(pattern) for pattern in self.config_patterns):
            return 'config'
        
        # Verificar se √© arquivo da aplica√ß√£o
        if any(path.match(pattern) for pattern in self.app_patterns):
            if self.config.app_dir in file_path:
                return 'app'
            elif self.config.ui_dir in file_path:
                return 'ui'
            elif self.config.shared_dir in file_path:
                return 'shared'
        
        return 'other'
    
    def _schedule_test_run(self) -> None:
        """Agendar execu√ß√£o de testes com debounce"""
        if self.running_tests:
            print("‚è≥ Testes j√° em execu√ß√£o, aguardando...")
            return
        
        # Cancelar timer anterior se existir
        if self.debounce_timer:
            self.debounce_timer.cancel()
        
        # Criar novo timer
        self.debounce_timer = threading.Timer(
            self.config.debounce_time,
            self._run_tests
        )
        self.debounce_timer.start()
        
        print(f"‚è∞ Agendando execu√ß√£o de testes em {self.config.debounce_time}s...")
    
    def _run_tests(self) -> None:
        """Executar testes baseado nas mudan√ßas"""
        if not self.changed_files:
            return
        
        print(f"\nüöÄ Executando testes para {len(self.changed_files)} arquivos modificados...")
        
        self.running_tests = True
        start_time = datetime.now()
        
        try:
            # Determinar quais testes executar
            test_files = self._get_affected_tests()
            
            if not test_files:
                print("‚úÖ Nenhum teste afetado pelas mudan√ßas")
                return
            
            # Executar testes
            results = self._execute_tests(test_files)
            
            # Registrar execu√ß√£o
            execution_record = {
                'timestamp': start_time.isoformat(),
                'changed_files': list(self.changed_files),
                'test_files': test_files,
                'results': results,
                'duration': (datetime.now() - start_time).total_seconds()
            }
            
            self.execution_history.append(execution_record)
            
            # Exibir resultados
            self._display_results(results)
            
            # Notifica√ß√µes
            if self.config.notifications:
                self._send_notification(results)
            
        except Exception as e:
            print(f"‚ùå Erro na execu√ß√£o: {e}")
        finally:
            self.running_tests = False
            self.changed_files.clear()
            self.last_run = datetime.now()
    
    def _get_affected_tests(self) -> List[str]:
        """Determinar quais testes executar baseado nas mudan√ßas"""
        affected_tests = set()
        
        for changed_file in self.changed_files:
            file_type = self._get_file_type(changed_file)
            
            if file_type == 'test':
                # Arquivo de teste modificado
                affected_tests.add(changed_file)
            elif file_type in ['app', 'ui', 'shared']:
                # Arquivo da aplica√ß√£o modificado - executar testes relacionados
                related_tests = self._find_related_tests(changed_file)
                affected_tests.update(related_tests)
            elif file_type == 'config':
                # Arquivo de configura√ß√£o modificado - executar todos os testes
                all_tests = self._get_all_test_files()
                affected_tests.update(all_tests)
        
        return list(affected_tests)
    
    def _find_related_tests(self, app_file: str) -> List[str]:
        """Encontrar testes relacionados a um arquivo da aplica√ß√£o"""
        related_tests = []
        
        # Padr√µes de busca baseados no nome do arquivo
        app_path = Path(app_file)
        app_name = app_path.stem
        
        # Buscar testes que referenciam este arquivo
        for test_file in Path(self.config.test_dir).rglob('*.spec.ts'):
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar se o teste referencia o arquivo modificado
                if app_name in content or app_path.name in content:
                    related_tests.append(str(test_file))
                    
            except Exception:
                continue
        
        return related_tests
    
    def _get_all_test_files(self) -> List[str]:
        """Obter todos os arquivos de teste"""
        test_files = []
        
        for pattern in self.test_patterns:
            for test_file in Path(self.config.test_dir).rglob(pattern):
                test_files.append(str(test_file))
        
        return test_files
    
    def _execute_tests(self, test_files: List[str]) -> Dict[str, Any]:
        """Executar testes espec√≠ficos"""
        if not test_files:
            return {'success': True, 'message': 'Nenhum teste para executar'}
        
        # Construir comando
        test_paths = ' '.join(test_files)
        cmd = f"npx playwright test {test_paths} --project={self.config.browser}"
        
        if self.config.parallel:
            cmd += " --workers=auto"
        
        print(f"üîß Executando: {cmd}")
        
        try:
            # Executar testes
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True,
                timeout=300  # 5 minutos timeout
            )
            
            return {
                'success': result.returncode == 0,
                'returncode': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'test_files': test_files,
                'command': cmd
            }
            
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'error': 'Timeout na execu√ß√£o',
                'test_files': test_files,
                'command': cmd
            }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'test_files': test_files,
                'command': cmd
            }
    
    def _display_results(self, results: Dict[str, Any]) -> None:
        """Exibir resultados da execu√ß√£o"""
        print("\nüìä RESULTADOS DA EXECU√á√ÉO")
        print("=" * 40)
        
        if results['success']:
            print("‚úÖ Testes executados com sucesso!")
            print(f"üìÅ Testes executados: {len(results['test_files'])}")
        else:
            print("‚ùå Testes falharam!")
            if 'error' in results:
                print(f"üî¥ Erro: {results['error']}")
            if results.get('stderr'):
                print(f"üî¥ Stderr: {results['stderr'][:200]}...")
        
        print(f"‚è±Ô∏è Comando: {results['command']}")
        print("=" * 40)
    
    def _send_notification(self, results: Dict[str, Any]) -> None:
        """Enviar notifica√ß√£o dos resultados"""
        if results['success']:
            print("üîî Notifica√ß√£o: Testes passaram com sucesso!")
        else:
            print("üîî Notifica√ß√£o: Testes falharam!")
    
    def _generate_watch_report(self) -> None:
        """Gerar relat√≥rio do watch mode"""
        if not self.execution_history:
            return
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'config': {
                'test_dir': self.config.test_dir,
                'debounce_time': self.config.debounce_time,
                'auto_run': self.config.auto_run,
                'browser': self.config.browser
            },
            'summary': {
                'total_executions': len(self.execution_history),
                'successful_executions': len([e for e in self.execution_history if e['results']['success']]),
                'failed_executions': len([e for e in self.execution_history if not e['results']['success']]),
                'total_duration': sum(e['duration'] for e in self.execution_history),
                'avg_duration': sum(e['duration'] for e in self.execution_history) / len(self.execution_history)
            },
            'executions': self.execution_history
        }
        
        # Salvar relat√≥rio
        report_path = 'test-results/watch-mode-report.json'
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìä Relat√≥rio do watch mode salvo em: {report_path}")
        
        # Exibir resumo
        summary = report['summary']
        print(f"\nüìà RESUMO DO WATCH MODE")
        print(f"   Execu√ß√µes totais: {summary['total_executions']}")
        print(f"   Execu√ß√µes bem-sucedidas: {summary['successful_executions']}")
        print(f"   Execu√ß√µes com falha: {summary['failed_executions']}")
        print(f"   Tempo total: {summary['total_duration']:.2f}s")
        print(f"   Tempo m√©dio: {summary['avg_duration']:.2f}s")

class E2EFileHandler(FileSystemEventHandler):
    """Handler para eventos de arquivo"""
    
    def __init__(self, watch_mode: E2EWatchMode):
        self.watch_mode = watch_mode
    
    def on_created(self, event):
        if not event.is_directory:
            self.watch_mode.on_file_change(event.src_path, 'created')
    
    def on_modified(self, event):
        if not event.is_directory:
            self.watch_mode.on_file_change(event.src_path, 'modified')
    
    def on_deleted(self, event):
        if not event.is_directory:
            self.watch_mode.on_file_change(event.src_path, 'deleted')

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description='Watch Mode para Desenvolvimento E2E')
    parser.add_argument('--test-dir', default='tests/e2e', help='Diret√≥rio de testes')
    parser.add_argument('--app-dir', default='app', help='Diret√≥rio da aplica√ß√£o')
    parser.add_argument('--ui-dir', default='ui', help='Diret√≥rio da UI')
    parser.add_argument('--shared-dir', default='shared', help='Diret√≥rio compartilhado')
    parser.add_argument('--debounce', type=float, default=2.0, help='Tempo de debounce em segundos')
    parser.add_argument('--no-auto-run', action='store_true', help='Desabilitar execu√ß√£o autom√°tica')
    parser.add_argument('--no-notifications', action='store_true', help='Desabilitar notifica√ß√µes')
    parser.add_argument('--no-parallel', action='store_true', help='Desabilitar execu√ß√£o paralela')
    parser.add_argument('--browser', default='chromium', choices=['chromium', 'firefox', 'webkit'], help='Browser para usar')
    
    args = parser.parse_args()
    
    config = WatchConfig(
        test_dir=args.test_dir,
        app_dir=args.app_dir,
        ui_dir=args.ui_dir,
        shared_dir=args.shared_dir,
        debounce_time=args.debounce,
        auto_run=not args.no_auto_run,
        notifications=not args.no_notifications,
        parallel=not args.no_parallel,
        browser=args.browser
    )
    
    watch_mode = E2EWatchMode(config)
    
    try:
        watch_mode.start()
    except KeyboardInterrupt:
        print("\nüõë Watch mode interrompido")
    finally:
        watch_mode.stop()

if __name__ == '__main__':
    main() 