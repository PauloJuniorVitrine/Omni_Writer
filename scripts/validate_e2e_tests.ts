#!/usr/bin/env ts-node

/**
 * Script de Valida√ß√£o de Testes E2E
 * - Executa valida√ß√£o autom√°tica de testes sint√©ticos
 * - Gera relat√≥rios detalhados
 * - Integra com CI/CD pipeline
 * 
 * üìê CoCoT: Baseado em boas pr√°ticas de automa√ß√£o de valida√ß√£o
 * üå≤ ToT: M√∫ltiplas estrat√©gias de valida√ß√£o implementadas
 * ‚ôªÔ∏è ReAct: Simulado para diferentes cen√°rios de execu√ß√£o
 */

import { SyntheticTestDetector, ValidationResult } from '../tests/e2e/utils/synthetic-test-detector';
import fs from 'fs';
import path from 'path';

// Configura√ß√µes
const CONFIG = {
  testDir: './tests/e2e',
  outputDir: './test-results',
  reportFile: 'synthetic-test-validation.md',
  jsonReportFile: 'synthetic-test-validation.json',
  threshold: 80, // Score m√≠nimo para aprova√ß√£o
  failOnViolations: process.env.FAIL_ON_VIOLATIONS === 'true'
};

// Cores para output no terminal
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

class E2EValidator {
  private detector: SyntheticTestDetector;
  private results: ValidationResult[] = [];

  constructor() {
    this.detector = new SyntheticTestDetector();
  }

  /**
   * Executa valida√ß√£o completa
   */
  async run(): Promise<boolean> {
    console.log(`${colors.cyan}${colors.bold}üîç Iniciando Valida√ß√£o de Testes E2E${colors.reset}\n`);

    try {
      // Validar suite de testes
      this.results = this.detector.validateTestSuite(CONFIG.testDir);
      
      // Gerar relat√≥rios
      this.generateReports();
      
      // Exibir resumo
      this.displaySummary();
      
      // Verificar se deve falhar
      const shouldFail = this.shouldFailValidation();
      
      if (shouldFail) {
        console.log(`${colors.red}${colors.bold}‚ùå Valida√ß√£o falhou!${colors.reset}`);
        process.exit(1);
      } else {
        console.log(`${colors.green}${colors.bold}‚úÖ Valida√ß√£o aprovada!${colors.reset}`);
        return true;
      }

    } catch (error) {
      console.error(`${colors.red}Erro durante valida√ß√£o:${colors.reset}`, error);
      process.exit(1);
    }
  }

  /**
   * Gera relat√≥rios detalhados
   */
  private generateReports(): void {
    // Criar diret√≥rio de output se n√£o existir
    if (!fs.existsSync(CONFIG.outputDir)) {
      fs.mkdirSync(CONFIG.outputDir, { recursive: true });
    }

    // Relat√≥rio em Markdown
    const markdownPath = path.join(CONFIG.outputDir, CONFIG.reportFile);
    this.detector.saveReport(markdownPath);

    // Relat√≥rio em JSON
    const jsonPath = path.join(CONFIG.outputDir, CONFIG.jsonReportFile);
    const jsonReport = {
      timestamp: new Date().toISOString(),
      config: CONFIG,
      summary: this.generateSummary(),
      results: this.results,
      metadata: {
        totalFiles: this.results.length,
        validFiles: this.results.filter(r => r.isValid).length,
        averageScore: this.results.reduce((sum, r) => sum + r.score, 0) / this.results.length,
        violationsCount: this.results.reduce((sum, r) => sum + r.violations.length, 0),
        warningsCount: this.results.reduce((sum, r) => sum + r.warnings.length, 0)
      }
    };

    fs.writeFileSync(jsonPath, JSON.stringify(jsonReport, null, 2));
    console.log(`${colors.blue}üìä Relat√≥rios gerados:${colors.reset}`);
    console.log(`  - Markdown: ${markdownPath}`);
    console.log(`  - JSON: ${jsonPath}\n`);
  }

  /**
   * Exibe resumo no terminal
   */
  private displaySummary(): void {
    const totalFiles = this.results.length;
    const validFiles = this.results.filter(r => r.isValid).length;
    const avgScore = this.results.reduce((sum, r) => sum + r.score, 0) / totalFiles;
    const violations = this.results.reduce((sum, r) => sum + r.violations.length, 0);
    const warnings = this.results.reduce((sum, r) => sum + r.warnings.length, 0);

    console.log(`${colors.bold}üìà Resumo da Valida√ß√£o:${colors.reset}\n`);
    console.log(`  üìÅ Total de arquivos: ${totalFiles}`);
    console.log(`  ‚úÖ Arquivos v√°lidos: ${validFiles}/${totalFiles} (${((validFiles/totalFiles)*100).toFixed(1)}%)`);
    console.log(`  üìä Score m√©dio: ${avgScore.toFixed(1)}/100`);
    console.log(`  üö® Viola√ß√µes: ${violations}`);
    console.log(`  ‚ö†Ô∏è  Avisos: ${warnings}\n`);

    // Detalhes por arquivo
    if (this.results.length > 0) {
      console.log(`${colors.bold}üìã Detalhes por Arquivo:${colors.reset}\n`);
      
      for (const result of this.results) {
        const status = result.isValid ? `${colors.green}‚úÖ${colors.reset}` : `${colors.red}‚ùå${colors.reset}`;
        const scoreColor = result.score >= 80 ? colors.green : result.score >= 60 ? colors.yellow : colors.red;
        
        console.log(`${status} ${path.basename(result.file)}`);
        console.log(`    Score: ${scoreColor}${result.score}/100${colors.reset}`);
        
        if (result.violations.length > 0) {
          console.log(`    ${colors.red}Violations: ${result.violations.length}${colors.reset}`);
        }
        
        if (result.warnings.length > 0) {
          console.log(`    ${colors.yellow}Warnings: ${result.warnings.length}${colors.reset}`);
        }
        
        console.log('');
      }
    }
  }

  /**
   * Gera resumo para relat√≥rios
   */
  private generateSummary() {
    const totalFiles = this.results.length;
    const validFiles = this.results.filter(r => r.isValid).length;
    const avgScore = this.results.reduce((sum, r) => sum + r.score, 0) / totalFiles;
    const violations = this.results.reduce((sum, r) => sum + r.violations.length, 0);
    const warnings = this.results.reduce((sum, r) => sum + r.warnings.length, 0);

    return {
      totalFiles,
      validFiles,
      invalidFiles: totalFiles - validFiles,
      averageScore: avgScore,
      violations,
      warnings,
      passRate: (validFiles / totalFiles) * 100,
      isPassing: validFiles === totalFiles && avgScore >= CONFIG.threshold
    };
  }

  /**
   * Verifica se a valida√ß√£o deve falhar
   */
  private shouldFailValidation(): boolean {
    const summary = this.generateSummary();
    
    // Falhar se h√° arquivos inv√°lidos
    if (summary.invalidFiles > 0) {
      return true;
    }
    
    // Falhar se score m√©dio est√° abaixo do threshold
    if (summary.averageScore < CONFIG.threshold) {
      return true;
    }
    
    // Falhar se h√° viola√ß√µes e FAIL_ON_VIOLATIONS est√° ativo
    if (CONFIG.failOnViolations && summary.violations > 0) {
      return true;
    }
    
    return false;
  }

  /**
   * Valida arquivo espec√≠fico
   */
  validateSingleFile(filePath: string): ValidationResult {
    console.log(`${colors.cyan}Validando arquivo: ${filePath}${colors.reset}`);
    return this.detector.validateTestFile(filePath);
  }

  /**
   * Lista arquivos que precisam de aten√ß√£o
   */
  listProblematicFiles(): ValidationResult[] {
    return this.results.filter(r => !r.isValid || r.score < CONFIG.threshold);
  }
}

// Fun√ß√£o principal
async function main() {
  const validator = new E2EValidator();
  
  // Verificar argumentos da linha de comando
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    const command = args[0];
    
    switch (command) {
      case '--file':
        if (args[1]) {
          const result = validator.validateSingleFile(args[1]);
          console.log(JSON.stringify(result, null, 2));
        } else {
          console.error('Especifique o arquivo: --file <caminho>');
          process.exit(1);
        }
        break;
        
      case '--list-problems':
        await validator.run();
        const problems = validator.listProblematicFiles();
        console.log('\nüö® Arquivos com problemas:');
        problems.forEach(p => console.log(`  - ${p.file} (Score: ${p.score}/100)`));
        break;
        
      case '--help':
        console.log(`
Uso: ts-node scripts/validate_e2e_tests.ts [op√ß√µes]

Op√ß√µes:
  --file <caminho>        Valida arquivo espec√≠fico
  --list-problems         Lista arquivos com problemas
  --help                  Exibe esta ajuda

Vari√°veis de ambiente:
  FAIL_ON_VIOLATIONS=true  Falha se h√° viola√ß√µes (padr√£o: false)
  E2E_ENV=dev|staging|prod Ambiente de teste (padr√£o: dev)
        `);
        break;
        
      default:
        console.error(`Comando desconhecido: ${command}`);
        console.error('Use --help para ver as op√ß√µes dispon√≠veis');
        process.exit(1);
    }
  } else {
    // Execu√ß√£o padr√£o: valida√ß√£o completa
    await validator.run();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error(`${colors.red}Erro fatal:${colors.reset}`, error);
    process.exit(1);
  });
}

export default E2EValidator; 