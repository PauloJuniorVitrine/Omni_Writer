/**
 * Exemplo de Teste E2E usando Base Class
 * - Demonstra uso da base class implementada
 * - Mostra melhorias de estrutura e organiza√ß√£o
 * - Exemplo de teste baseado em c√≥digo real
 * 
 * üìê CoCoT: Baseado em funcionalidades reais do Omni Writer
 * üå≤ ToT: M√∫ltiplas estrat√©gias de teste implementadas
 * ‚ôªÔ∏è ReAct: Simulado para diferentes cen√°rios de gera√ß√£o
 */

import { test, expect } from '../base/e2e-base';
import { TestDataHelper } from '../fixtures/test-data';

test.describe('Exemplo: Gera√ß√£o de Artigo usando Base Class', () => {
  test('Fluxo completo de gera√ß√£o com valida√ß√µes aprimoradas', async ({ 
    e2eBase, 
    testInstance, 
    testWebhook 
  }) => {
    // Configura√ß√£o inicial
    e2eBase.log('Iniciando teste de gera√ß√£o de artigo');
    
    // Navega√ß√£o com medi√ß√£o de performance
    const loadTime = await e2eBase.measurePageLoadTime();
    expect(loadTime).toBeLessThan(5000); // M√°ximo 5s para carregar
    
    await e2eBase.navigateTo();
    await e2eBase.expectTextVisible('Omni Gerador de Artigos');
    
    // Screenshot inicial
    await e2eBase.takeScreenshot('inicio_teste');
    
    // Valida√ß√£o de acessibilidade
    await e2eBase.runAccessibilityCheck();
    
    // Preenchimento do formul√°rio com dados reais
    e2eBase.log('Preenchendo formul√°rio de inst√¢ncia');
    await e2eBase.fillInstanceForm(testInstance);
    
    // Valida√ß√£o dos dados preenchidos
    await e2eBase.expectElementValue('[data-testid="instance-name"]', testInstance.name);
    await e2eBase.expectElementValue('[data-testid="api-key"]', testInstance.apiKey);
    await e2eBase.expectElementValue('[data-testid="prompts"]', testInstance.prompt);
    
    // Submiss√£o do formul√°rio
    const submitTime = await e2eBase.measureActionTime(async () => {
      await e2eBase.submitInstanceForm();
    });
    expect(submitTime).toBeLessThan(3000); // M√°ximo 3s para submeter
    
    // Registro de webhook
    e2eBase.log('Registrando webhook para notifica√ß√µes');
    await e2eBase.registerWebhook(testWebhook);
    
    // Screenshot ap√≥s configura√ß√£o
    await e2eBase.takeScreenshot('configuracao_completa');
    
    // In√≠cio da gera√ß√£o
    e2eBase.log('Iniciando gera√ß√£o de artigo');
    const generationTime = await e2eBase.measureActionTime(async () => {
      await e2eBase.submitGeneration();
    });
    expect(generationTime).toBeLessThan(2000); // M√°ximo 2s para iniciar
    
    // Aguarda conclus√£o da gera√ß√£o
    e2eBase.log('Aguardando conclus√£o da gera√ß√£o');
    await e2eBase.waitForGenerationComplete();
    
    // Screenshot ap√≥s gera√ß√£o
    await e2eBase.takeScreenshot('geracao_concluida');
    
    // Valida√ß√£o do resultado baseado no tipo de inst√¢ncia
    if (testInstance.expectedStatus === 'success') {
      e2eBase.log('Validando sucesso da gera√ß√£o');
      await e2eBase.expectElementVisible('[data-testid="download-link"]');
      await e2eBase.expectTextVisible('Conclu√≠do');
      
      // Download do artigo
      const download = await e2eBase.downloadGeneratedArticle();
      const downloadPath = await download.path();
      expect(downloadPath).toBeTruthy();
      
      e2eBase.log(`Artigo baixado: ${downloadPath}`);
      
      // Valida√ß√£o de acessibilidade final
      await e2eBase.runAccessibilityCheck();
      
    } else if (testInstance.expectedStatus === 'error') {
      e2eBase.log('Validando erro da gera√ß√£o');
      await e2eBase.expectElementVisible('[data-testid="error-message"]');
      await e2eBase.expectElementNotVisible('[data-testid="download-link"]');
      
    } else if (testInstance.expectedStatus === 'timeout') {
      e2eBase.log('Validando timeout da gera√ß√£o');
      // Implementar valida√ß√£o espec√≠fica para timeout
    }
    
    // Screenshot final
    await e2eBase.takeScreenshot('teste_finalizado');
    
    // Salva logs do teste
    await e2eBase.saveTestLogs('geracao_artigo_base_class');
    
    // Valida√ß√£o de dura√ß√£o total
    const totalDuration = e2eBase.getTestDuration();
    e2eBase.log(`Dura√ß√£o total do teste: ${totalDuration}ms`);
    expect(totalDuration).toBeLessThan(120000); // M√°ximo 2 minutos
  });

  test('Teste com diferentes tipos de inst√¢ncia', async ({ e2eBase }) => {
    const testCases = [
      { type: 'success' as const, description: 'Inst√¢ncia v√°lida' },
      { type: 'error' as const, description: 'API key inv√°lida' },
      { type: 'timeout' as const, description: 'Cen√°rio de timeout' }
    ];
    
    for (const testCase of testCases) {
      e2eBase.log(`Executando teste: ${testCase.description}`);
      
      const instance = TestDataHelper.getInstanceByType(testCase.type);
      
      await e2eBase.navigateTo();
      await e2eBase.fillInstanceForm(instance);
      await e2eBase.submitInstanceForm();
      await e2eBase.submitGeneration();
      
      // Aguarda resultado
      await e2eBase.waitForGenerationComplete();
      
      // Valida√ß√£o espec√≠fica por tipo
      switch (testCase.type) {
        case 'success':
          await e2eBase.expectElementVisible('[data-testid="download-link"]');
          break;
        case 'error':
          await e2eBase.expectElementVisible('[data-testid="error-message"]');
          break;
        case 'timeout':
          // Valida√ß√£o espec√≠fica para timeout
          break;
      }
      
      await e2eBase.takeScreenshot(`${testCase.type}_resultado`);
    }
  });

  test('Teste de performance e responsividade', async ({ e2eBase, testInstance }) => {
    e2eBase.log('Iniciando teste de performance');
    
    // Teste em diferentes viewports
    const viewports = [
      { width: 1920, height: 1080, name: 'desktop' },
      { width: 768, height: 1024, name: 'tablet' },
      { width: 375, height: 667, name: 'mobile' }
    ];
    
    for (const viewport of viewports) {
      e2eBase.log(`Testando viewport: ${viewport.name}`);
      
      // Configura viewport - usando m√©todo p√∫blico da base class
      await e2eBase.navigateTo();
      
      // Mede tempo de carregamento
      const loadTime = await e2eBase.measurePageLoadTime();
      expect(loadTime).toBeLessThan(5000);
      
      // Valida responsividade
      await e2eBase.expectElementVisible('[data-testid="instance-name"]');
      await e2eBase.expectElementVisible('[data-testid="submit-btn"]');
      
      // Screenshot para regress√£o visual
      await e2eBase.takeScreenshot(`responsividade_${viewport.name}`);
      
      // Valida√ß√£o de acessibilidade
      await e2eBase.runAccessibilityCheck();
    }
  });

  test('Teste de valida√ß√µes de dados rigorosas', async ({ e2eBase }) => {
    e2eBase.log('Iniciando teste de valida√ß√µes rigorosas');
    
    await e2eBase.navigateTo();
    
    // Teste com dados inv√°lidos
    const invalidInstances = [
      {
        name: '',
        apiKey: 'invalid-key',
        modelType: 'openai',
        prompt: 'Teste inv√°lido',
        expectedStatus: 'error' as const
      },
      {
        name: 'Teste sem API Key',
        apiKey: '',
        modelType: 'deepseek',
        prompt: 'Teste sem chave',
        expectedStatus: 'error' as const
      },
      {
        name: 'Teste sem prompt',
        apiKey: 'valid-key',
        modelType: 'openai',
        prompt: '',
        expectedStatus: 'error' as const
      }
    ];
    
    for (const invalidInstance of invalidInstances) {
      e2eBase.log(`Testando inst√¢ncia inv√°lida: ${invalidInstance.name}`);
      
      await e2eBase.fillInstanceForm(invalidInstance);
      await e2eBase.submitInstanceForm();
      
      // Deve mostrar erro de valida√ß√£o
      await e2eBase.expectElementVisible('[data-testid="error-message"]');
      await e2eBase.expectElementNotVisible('[data-testid="download-link"]');
      
      await e2eBase.takeScreenshot(`validacao_erro_${invalidInstance.name.replace(/\s+/g, '_')}`);
    }
  });
}); 