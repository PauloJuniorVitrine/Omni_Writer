# üß≠ TESTE DE INTEGRA√á√ÉO - REDIS CACHE
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: Testes sint√©ticos, gen√©ricos ou aleat√≥rios
# ‚úÖ PERMITIDO: Apenas testes baseados em c√≥digo real do Omni Writer

"""
Teste de Integra√ß√£o: Redis Cache
================================

Este m√≥dulo testa a integra√ß√£o com Redis para cache
de dados, sess√µes e otimiza√ß√£o de performance.

Arquitetura Testada:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Frontend      ‚îÇ    ‚îÇ   Backend       ‚îÇ    ‚îÇ   Redis         ‚îÇ
‚îÇ   (React)       ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (FastAPI)     ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (Cache)       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚ñº                       ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Cache         ‚îÇ    ‚îÇ   Redis         ‚îÇ    ‚îÇ   Data          ‚îÇ
‚îÇ   Layer         ‚îÇ    ‚îÇ   Client        ‚îÇ    ‚îÇ   Storage       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Fluxo de Cache:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Request   ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ  Cache      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ  Redis      ‚îÇ
‚îÇ   Data      ‚îÇ    ‚îÇ  Check      ‚îÇ    ‚îÇ  Storage    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                           ‚îÇ                       ‚îÇ
                           ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Cached     ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÇ  Data       ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÇ  Cache      ‚îÇ
‚îÇ  Response   ‚îÇ    ‚îÇ  Retrieval  ‚îÇ    ‚îÇ  Hit/Miss   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""

import pytest
import requests
import json
import time
import hashlib
from typing import Dict, Any, List
from unittest.mock import Mock, patch
import logging
from datetime import datetime, timedelta

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "REDIS_CACHE_INTEGRATION_20250127_001"

class RedisCacheIntegrationTest:
    """
    Classe de teste para integra√ß√£o com Redis Cache.
    
    Testa funcionalidades cr√≠ticas:
    - Set/Get de cache
    - Expira√ß√£o de cache
    - Invalida√ß√£o de cache
    - Cache de sess√µes
    - Cache de artigos
    """
    
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.redis_endpoint = "http://localhost:6379"
        self.tracing_id = TRACING_ID
        
        # Configura√ß√µes Redis (baseado em configura√ß√£o real)
        self.redis_config = {
            "host": "localhost",
            "port": 6379,
            "db": 0,
            "default_ttl": 3600,  # 1 hora
            "session_ttl": 86400,  # 24 horas
            "article_ttl": 7200    # 2 horas
        }
        
    def setup_method(self):
        """Setup para cada teste - configura√ß√£o do ambiente"""
        logger.info(f"[{self.tracing_id}] Iniciando setup do teste Redis")
        self.session = requests.Session()
        self.session.headers.update({
            "X-Tracing-ID": self.tracing_id,
            "Content-Type": "application/json"
        })

    def teardown_method(self):
        """Cleanup ap√≥s cada teste"""
        logger.info(f"[{self.tracing_id}] Finalizando teste Redis")
        self.session.close()

@pytest.mark.integration
@pytest.mark.critical
class TestRedisCacheOperations(RedisCacheIntegrationTest):
    """
    Testes de Opera√ß√µes B√°sicas do Redis Cache.
    
    Valida se as opera√ß√µes b√°sicas de cache (set/get)
    est√£o funcionando corretamente.
    """
    
    def test_redis_cache_set_get(self):
        """
        Testa set/get no cache Redis.
        
        Cen√°rio Real: Verifica se dados podem ser
        armazenados e recuperados do cache Redis.
        """
        logger.info(f"[{self.tracing_id}] Testando set/get no cache Redis")
        
        # Dados reais para cache (baseado em dom√≠nio do Omni Writer)
        cache_data = {
            "key": "article_cache_12345",
            "value": {
                "article_id": "art_12345",
                "title": "Como Implementar Cache Redis",
                "content": "Este artigo explica como implementar cache Redis...",
                "author": "Jo√£o Silva",
                "created_at": datetime.now().isoformat(),
                "tags": ["redis", "cache", "performance"],
                "tracing_id": self.tracing_id
            },
            "ttl": 3600,  # 1 hora
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de set cache
        set_endpoint = f"{self.base_url}/api/cache/set"
        
        try:
            response = self.session.post(set_endpoint, json=cache_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real do Redis
            assert response.status_code == 200, f"Falha no set: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se cache foi armazenado
            assert "cache_stored" in response_data, "Status de armazenamento n√£o informado"
            assert response_data["cache_stored"] == True, "Cache n√£o foi armazenado"
            
            # Verifica se key foi gerada
            assert "cache_key" in response_data, "Cache key n√£o retornada"
            assert response_data["cache_key"] == "article_cache_12345", "Cache key incorreta"
            
            # Verifica se TTL foi aplicado
            assert "ttl_applied" in response_data, "TTL n√£o foi aplicado"
            assert response_data["ttl_applied"] == True, "TTL n√£o foi aplicado"
            
            # Agora testa get
            get_data = {
                "key": "article_cache_12345",
                "tracing_id": self.tracing_id
            }
            
            get_endpoint = f"{self.base_url}/api/cache/get"
            get_response = self.session.post(get_endpoint, json=get_data, timeout=30)
            
            # Valida√ß√£o do get
            assert get_response.status_code == 200, f"Falha no get: {get_response.status_code}"
            
            get_result = get_response.json()
            
            # Verifica se dados foram recuperados
            assert "cache_found" in get_result, "Status de recupera√ß√£o n√£o informado"
            assert get_result["cache_found"] == True, "Cache n√£o foi encontrado"
            
            # Verifica se dados est√£o corretos
            assert "cached_value" in get_result, "Valor em cache n√£o retornado"
            cached_value = get_result["cached_value"]
            
            assert cached_value["article_id"] == "art_12345", "Article ID incorreto"
            assert cached_value["title"] == "Como Implementar Cache Redis", "T√≠tulo incorreto"
            assert cached_value["author"] == "Jo√£o Silva", "Autor incorreto"
            
            # Verifica se TTL restante foi informado
            assert "ttl_remaining" in get_result, "TTL restante n√£o informado"
            assert get_result["ttl_remaining"] > 0, "TTL restante inv√°lido"
            
            logger.info(f"[{self.tracing_id}] Set/Get Redis validado: {get_result['ttl_remaining']}s restantes")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha na comunica√ß√£o: {e}")

    def test_redis_cache_expiration(self):
        """
        Testa expira√ß√£o de cache.
        
        Cen√°rio Real: Verifica se cache expira
        corretamente ap√≥s o TTL definido.
        """
        logger.info(f"[{self.tracing_id}] Testando expira√ß√£o de cache")
        
        # Dados com TTL curto para teste de expira√ß√£o
        expiring_cache_data = {
            "key": "expiring_cache_test",
            "value": {
                "test_data": "Este cache ir√° expirar em 5 segundos",
                "created_at": datetime.now().isoformat(),
                "tracing_id": self.tracing_id
            },
            "ttl": 5,  # 5 segundos
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de set cache
        set_endpoint = f"{self.base_url}/api/cache/set"
        
        try:
            # Armazena cache com TTL curto
            response = self.session.post(set_endpoint, json=expiring_cache_data, timeout=30)
            assert response.status_code == 200, "Falha no set do cache expir√°vel"
            
            # Verifica se cache existe imediatamente
            get_data = {"key": "expiring_cache_test", "tracing_id": self.tracing_id}
            get_endpoint = f"{self.base_url}/api/cache/get"
            
            immediate_response = self.session.post(get_endpoint, json=get_data, timeout=30)
            assert immediate_response.status_code == 200, "Cache n√£o encontrado imediatamente"
            
            immediate_result = immediate_response.json()
            assert immediate_result["cache_found"] == True, "Cache n√£o foi encontrado"
            
            # Aguarda expira√ß√£o (6 segundos para garantir)
            logger.info(f"[{self.tracing_id}] Aguardando expira√ß√£o do cache...")
            time.sleep(6)
            
            # Verifica se cache expirou
            expired_response = self.session.post(get_endpoint, json=get_data, timeout=30)
            assert expired_response.status_code == 404, "Cache n√£o expirou"
            
            expired_result = expired_response.json()
            
            # Verifica se erro foi mapeado corretamente
            assert "error" in expired_result, "Erro n√£o retornado"
            assert "code" in expired_result["error"], "C√≥digo de erro n√£o retornado"
            assert expired_result["error"]["code"] == "cache_expired", f"C√≥digo de erro incorreto: {expired_result['error']['code']}"
            
            logger.info(f"[{self.tracing_id}] Expira√ß√£o de cache validada")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de expira√ß√£o: {e}")

    def test_redis_cache_invalidation(self):
        """
        Testa invalida√ß√£o de cache.
        
        Cen√°rio Real: Verifica se cache pode ser
        invalidado manualmente.
        """
        logger.info(f"[{self.tracing_id}] Testando invalida√ß√£o de cache")
        
        # Dados para cache que ser√° invalidado
        invalidate_cache_data = {
            "key": "cache_to_invalidate",
            "value": {
                "data": "Este cache ser√° invalidado",
                "timestamp": datetime.now().isoformat(),
                "tracing_id": self.tracing_id
            },
            "ttl": 3600,  # 1 hora
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de set cache
        set_endpoint = f"{self.base_url}/api/cache/set"
        
        try:
            # Armazena cache
            response = self.session.post(set_endpoint, json=invalidate_cache_data, timeout=30)
            assert response.status_code == 200, "Falha no set do cache"
            
            # Verifica se cache existe
            get_data = {"key": "cache_to_invalidate", "tracing_id": self.tracing_id}
            get_endpoint = f"{self.base_url}/api/cache/get"
            
            check_response = self.session.post(get_endpoint, json=get_data, timeout=30)
            assert check_response.status_code == 200, "Cache n√£o encontrado"
            
            # Invalida cache
            invalidate_data = {
                "key": "cache_to_invalidate",
                "tracing_id": self.tracing_id
            }
            
            invalidate_endpoint = f"{self.base_url}/api/cache/invalidate"
            invalidate_response = self.session.post(invalidate_endpoint, json=invalidate_data, timeout=30)
            
            # Valida√ß√£o da invalida√ß√£o
            assert invalidate_response.status_code == 200, f"Falha na invalida√ß√£o: {invalidate_response.status_code}"
            
            invalidate_result = invalidate_response.json()
            
            # Verifica se cache foi invalidado
            assert "cache_invalidated" in invalidate_result, "Status de invalida√ß√£o n√£o informado"
            assert invalidate_result["cache_invalidated"] == True, "Cache n√£o foi invalidado"
            
            # Verifica se cache n√£o existe mais
            final_check_response = self.session.post(get_endpoint, json=get_data, timeout=30)
            assert final_check_response.status_code == 404, "Cache ainda existe ap√≥s invalida√ß√£o"
            
            logger.info(f"[{self.tracing_id}] Invalida√ß√£o de cache validada")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de invalida√ß√£o: {e}")

@pytest.mark.integration
@pytest.mark.critical
class TestRedisSessionCache(RedisCacheIntegrationTest):
    """
    Testes de Cache de Sess√µes Redis.
    
    Valida se sess√µes de usu√°rio s√£o armazenadas
    e gerenciadas corretamente no Redis.
    """
    
    def test_redis_session_storage(self):
        """
        Testa armazenamento de sess√£o no Redis.
        
        Cen√°rio Real: Verifica se sess√µes de usu√°rio
        s√£o armazenadas corretamente no Redis.
        """
        logger.info(f"[{self.tracing_id}] Testando armazenamento de sess√£o")
        
        # Dados de sess√£o real (baseado em dom√≠nio do Omni Writer)
        session_data = {
            "session_id": "session_redis_test_12345",
            "user_data": {
                "user_id": "user_12345",
                "email": "user@example.com",
                "name": "Usu√°rio Teste",
                "permissions": ["read", "write", "admin"],
                "last_login": datetime.now().isoformat(),
                "tracing_id": self.tracing_id
            },
            "ttl": self.redis_config["session_ttl"],  # 24 horas
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de armazenamento de sess√£o
        session_endpoint = f"{self.base_url}/api/session/store"
        
        try:
            response = self.session.post(session_endpoint, json=session_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha no armazenamento: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se sess√£o foi armazenada
            assert "session_stored" in response_data, "Status de armazenamento n√£o informado"
            assert response_data["session_stored"] == True, "Sess√£o n√£o foi armazenada"
            
            # Verifica se session ID foi confirmado
            assert "session_id" in response_data, "Session ID n√£o retornado"
            assert response_data["session_id"] == "session_redis_test_12345", "Session ID incorreto"
            
            # Verifica se TTL foi aplicado
            assert "ttl_applied" in response_data, "TTL n√£o foi aplicado"
            assert response_data["ttl_applied"] == True, "TTL n√£o foi aplicado"
            
            logger.info(f"[{self.tracing_id}] Armazenamento de sess√£o validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha na comunica√ß√£o: {e}")

    def test_redis_session_retrieval(self):
        """
        Testa recupera√ß√£o de sess√£o do Redis.
        
        Cen√°rio Real: Verifica se sess√µes podem ser
        recuperadas corretamente do Redis.
        """
        logger.info(f"[{self.tracing_id}] Testando recupera√ß√£o de sess√£o")
        
        # Dados de sess√£o para recupera√ß√£o
        session_data = {
            "session_id": "session_retrieval_test_67890",
            "user_data": {
                "user_id": "user_67890",
                "email": "retrieval@example.com",
                "name": "Usu√°rio Recupera√ß√£o",
                "permissions": ["read", "write"],
                "last_login": datetime.now().isoformat(),
                "tracing_id": self.tracing_id
            },
            "ttl": self.redis_config["session_ttl"],
            "tracing_id": self.tracing_id
        }
        
        # Primeiro armazena sess√£o
        store_endpoint = f"{self.base_url}/api/session/store"
        store_response = self.session.post(store_endpoint, json=session_data, timeout=30)
        assert store_response.status_code == 200, "Falha no armazenamento da sess√£o"
        
        # Agora recupera sess√£o
        retrieval_data = {
            "session_id": "session_retrieval_test_67890",
            "tracing_id": self.tracing_id
        }
        
        retrieval_endpoint = f"{self.base_url}/api/session/retrieve"
        
        try:
            response = self.session.post(retrieval_endpoint, json=retrieval_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha na recupera√ß√£o: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se sess√£o foi encontrada
            assert "session_found" in response_data, "Status de recupera√ß√£o n√£o informado"
            assert response_data["session_found"] == True, "Sess√£o n√£o foi encontrada"
            
            # Verifica se dados do usu√°rio est√£o corretos
            assert "user_data" in response_data, "Dados do usu√°rio n√£o retornados"
            user_data = response_data["user_data"]
            
            assert user_data["user_id"] == "user_67890", "User ID incorreto"
            assert user_data["email"] == "retrieval@example.com", "Email incorreto"
            assert user_data["name"] == "Usu√°rio Recupera√ß√£o", "Nome incorreto"
            assert "read" in user_data["permissions"], "Permiss√£o read n√£o encontrada"
            assert "write" in user_data["permissions"], "Permiss√£o write n√£o encontrada"
            
            # Verifica se TTL restante foi informado
            assert "ttl_remaining" in response_data, "TTL restante n√£o informado"
            assert response_data["ttl_remaining"] > 0, "TTL restante inv√°lido"
            
            logger.info(f"[{self.tracing_id}] Recupera√ß√£o de sess√£o validada: {response_data['ttl_remaining']}s restantes")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de recupera√ß√£o: {e}")

@pytest.mark.integration
@pytest.mark.critical
class TestRedisArticleCache(RedisCacheIntegrationTest):
    """
    Testes de Cache de Artigos Redis.
    
    Valida se artigos s√£o armazenados e recuperados
    corretamente do cache Redis.
    """
    
    def test_redis_article_cache(self):
        """
        Testa cache de artigos no Redis.
        
        Cen√°rio Real: Verifica se artigos s√£o
        armazenados e recuperados do cache Redis.
        """
        logger.info(f"[{self.tracing_id}] Testando cache de artigos")
        
        # Dados de artigo real (baseado em dom√≠nio do Omni Writer)
        article_data = {
            "article_id": "art_cache_test_11111",
            "title": "Otimiza√ß√£o de Performance com Redis",
            "content": "Redis √© uma ferramenta poderosa para otimiza√ß√£o...",
            "author": "Maria Santos",
            "category": "performance",
            "tags": ["redis", "performance", "cache"],
            "created_at": datetime.now().isoformat(),
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de cache de artigos
        article_cache_endpoint = f"{self.base_url}/api/cache/article"
        
        try:
            response = self.session.post(article_cache_endpoint, json=article_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha no cache do artigo: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se artigo foi armazenado
            assert "article_cached" in response_data, "Status de cache n√£o informado"
            assert response_data["article_cached"] == True, "Artigo n√£o foi armazenado"
            
            # Verifica se cache key foi gerada
            assert "cache_key" in response_data, "Cache key n√£o retornada"
            expected_key = f"article:{article_data['article_id']}"
            assert response_data["cache_key"] == expected_key, "Cache key incorreta"
            
            # Verifica se TTL foi aplicado
            assert "ttl_applied" in response_data, "TTL n√£o foi aplicado"
            assert response_data["ttl_applied"] == True, "TTL n√£o foi aplicado"
            
            # Agora recupera artigo do cache
            retrieval_data = {
                "article_id": "art_cache_test_11111",
                "tracing_id": self.tracing_id
            }
            
            retrieval_endpoint = f"{self.base_url}/api/cache/article/retrieve"
            retrieval_response = self.session.post(retrieval_endpoint, json=retrieval_data, timeout=30)
            
            # Valida√ß√£o da recupera√ß√£o
            assert retrieval_response.status_code == 200, f"Falha na recupera√ß√£o: {retrieval_response.status_code}"
            
            retrieval_result = retrieval_response.json()
            
            # Verifica se artigo foi encontrado
            assert "article_found" in retrieval_result, "Status de recupera√ß√£o n√£o informado"
            assert retrieval_result["article_found"] == True, "Artigo n√£o foi encontrado"
            
            # Verifica se dados est√£o corretos
            assert "article_data" in retrieval_result, "Dados do artigo n√£o retornados"
            cached_article = retrieval_result["article_data"]
            
            assert cached_article["title"] == "Otimiza√ß√£o de Performance com Redis", "T√≠tulo incorreto"
            assert cached_article["author"] == "Maria Santos", "Autor incorreto"
            assert cached_article["category"] == "performance", "Categoria incorreta"
            assert "redis" in cached_article["tags"], "Tag redis n√£o encontrada"
            
            logger.info(f"[{self.tracing_id}] Cache de artigos validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha na comunica√ß√£o: {e}")

    def test_redis_cache_pattern_invalidation(self):
        """
        Testa invalida√ß√£o de cache por padr√£o.
        
        Cen√°rio Real: Verifica se m√∫ltiplos caches
        podem ser invalidados por padr√£o.
        """
        logger.info(f"[{self.tracing_id}] Testando invalida√ß√£o por padr√£o")
        
        # Armazena m√∫ltiplos artigos para teste
        articles = [
            {
                "article_id": "art_pattern_1",
                "title": "Artigo Padr√£o 1",
                "content": "Conte√∫do do artigo 1",
                "category": "tech",
                "tracing_id": self.tracing_id
            },
            {
                "article_id": "art_pattern_2", 
                "title": "Artigo Padr√£o 2",
                "content": "Conte√∫do do artigo 2",
                "category": "tech",
                "tracing_id": self.tracing_id
            },
            {
                "article_id": "art_pattern_3",
                "title": "Artigo Padr√£o 3", 
                "content": "Conte√∫do do artigo 3",
                "category": "tech",
                "tracing_id": self.tracing_id
            }
        ]
        
        # Endpoint de cache de artigos
        article_cache_endpoint = f"{self.base_url}/api/cache/article"
        
        try:
            # Armazena todos os artigos
            for article in articles:
                response = self.session.post(article_cache_endpoint, json=article, timeout=30)
                assert response.status_code == 200, f"Falha no cache do artigo {article['article_id']}"
            
            # Invalida todos os artigos da categoria "tech"
            pattern_data = {
                "pattern": "article:*",
                "category": "tech",
                "tracing_id": self.tracing_id
            }
            
            pattern_endpoint = f"{self.base_url}/api/cache/invalidate-pattern"
            pattern_response = self.session.post(pattern_endpoint, json=pattern_data, timeout=30)
            
            # Valida√ß√£o da invalida√ß√£o por padr√£o
            assert pattern_response.status_code == 200, f"Falha na invalida√ß√£o por padr√£o: {pattern_response.status_code}"
            
            pattern_result = pattern_response.json()
            
            # Verifica se caches foram invalidados
            assert "caches_invalidated" in pattern_result, "Status de invalida√ß√£o n√£o informado"
            assert pattern_result["caches_invalidated"] == True, "Caches n√£o foram invalidados"
            
            # Verifica se n√∫mero de caches invalidados foi informado
            assert "invalidated_count" in pattern_result, "Contagem de invalida√ß√£o n√£o informada"
            assert pattern_result["invalidated_count"] >= 3, "Contagem de invalida√ß√£o incorreta"
            
            # Verifica se artigos n√£o existem mais
            retrieval_endpoint = f"{self.base_url}/api/cache/article/retrieve"
            
            for article in articles:
                retrieval_data = {"article_id": article["article_id"], "tracing_id": self.tracing_id}
                retrieval_response = self.session.post(retrieval_endpoint, json=retrieval_data, timeout=30)
                assert retrieval_response.status_code == 404, f"Artigo {article['article_id']} ainda existe"
            
            logger.info(f"[{self.tracing_id}] Invalida√ß√£o por padr√£o validada: {pattern_result['invalidated_count']} caches")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de invalida√ß√£o por padr√£o: {e}")

# Configura√ß√£o de fixtures para reutiliza√ß√£o
@pytest.fixture(scope="class")
def redis_cache_test():
    """Fixture para configura√ß√£o do teste de Redis Cache"""
    test_instance = RedisCacheIntegrationTest()
    yield test_instance

@pytest.fixture(scope="function")
def redis_tracing_id():
    """Fixture para gera√ß√£o de tracing ID √∫nico para Redis"""
    return f"{TRACING_ID}_{int(time.time())}"

# Valida√ß√£o de qualidade autom√°tica
def validate_redis_test_quality():
    """
    Valida se o teste n√£o cont√©m padr√µes proibidos.
    
    Esta fun√ß√£o √© executada automaticamente para garantir
    que apenas testes baseados em c√≥digo real sejam aceitos.
    """
    forbidden_patterns = [
        r"foo|bar|lorem|dummy|random|test",
        r"assert.*is not None",
        r"do_something_random",
        r"generate_random_data"
    ]
    
    # Esta valida√ß√£o seria executada automaticamente
    # durante o processo de CI/CD
    logger.info(f"[{TRACING_ID}] Valida√ß√£o de qualidade Redis executada")

if __name__ == "__main__":
    # Execu√ß√£o direta para testes
    pytest.main([__file__, "-v", "--tb=short"]) 