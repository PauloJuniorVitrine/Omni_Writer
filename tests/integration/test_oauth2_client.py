# üß≠ TESTE DE INTEGRA√á√ÉO - OAUTH2 CLIENT AUTHENTICATION
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: Testes sint√©ticos, gen√©ricos ou aleat√≥rios
# ‚úÖ PERMITIDO: Apenas testes baseados em c√≥digo real do Omni Writer

"""
Teste de Integra√ß√£o: OAuth2 Client Authentication
================================================

Este m√≥dulo testa a integra√ß√£o com OAuth2 para autentica√ß√£o
social (Google, GitHub) e gest√£o de tokens.

Arquitetura Testada:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Frontend      ‚îÇ    ‚îÇ   Backend       ‚îÇ    ‚îÇ   OAuth2        ‚îÇ
‚îÇ   (React)       ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (FastAPI)     ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   Providers     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚ñº                       ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Auth          ‚îÇ    ‚îÇ   OAuth2        ‚îÇ    ‚îÇ   Token         ‚îÇ
‚îÇ   Flow          ‚îÇ    ‚îÇ   Client        ‚îÇ    ‚îÇ   Management    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Fluxo de Autentica√ß√£o:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   User      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ  OAuth2     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ  Provider   ‚îÇ
‚îÇ  Login      ‚îÇ    ‚îÇ  Request    ‚îÇ    ‚îÇ  Auth       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                           ‚îÇ                       ‚îÇ
                           ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Access     ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÇ  Token      ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÇ  Auth       ‚îÇ
‚îÇ  Granted    ‚îÇ    ‚îÇ  Exchange   ‚îÇ    ‚îÇ  Code       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""

import pytest
import requests
import json
import time
import base64
from typing import Dict, Any, List
from unittest.mock import Mock, patch
import logging
from datetime import datetime, timedelta

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "OAUTH2_CLIENT_INTEGRATION_20250127_001"

class OAuth2ClientIntegrationTest:
    """
    Classe de teste para integra√ß√£o com OAuth2 Client.
    
    Testa funcionalidades cr√≠ticas:
    - Fluxo OAuth2 do Google
    - Fluxo OAuth2 do GitHub
    - Refresh de tokens
    - Valida√ß√£o de tokens
    - Revoga√ß√£o de tokens
    """
    
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.tracing_id = TRACING_ID
        
        # Configura√ß√µes OAuth2 (baseado em configura√ß√£o real)
        self.oauth2_config = {
            "google": {
                "client_id": "google_client_id_test",
                "client_secret": "google_client_secret_test",
                "redirect_uri": "http://localhost:3000/auth/google/callback",
                "scope": "openid email profile"
            },
            "github": {
                "client_id": "github_client_id_test",
                "client_secret": "github_client_secret_test",
                "redirect_uri": "http://localhost:3000/auth/github/callback",
                "scope": "user:email read:user"
            }
        }
        
    def setup_method(self):
        """Setup para cada teste - configura√ß√£o do ambiente"""
        logger.info(f"[{self.tracing_id}] Iniciando setup do teste OAuth2")
        self.session = requests.Session()
        self.session.headers.update({
            "X-Tracing-ID": self.tracing_id,
            "Content-Type": "application/json"
        })

    def teardown_method(self):
        """Cleanup ap√≥s cada teste"""
        logger.info(f"[{self.tracing_id}] Finalizando teste OAuth2")
        self.session.close()

@pytest.mark.integration
@pytest.mark.critical
class TestGoogleOAuth2Flow(OAuth2ClientIntegrationTest):
    """
    Testes de Fluxo OAuth2 do Google.
    
    Valida se o sistema processa corretamente a autentica√ß√£o
    atrav√©s do Google OAuth2.
    """
    
    def test_google_oauth2_flow(self):
        """
        Testa fluxo OAuth2 do Google.
        
        Cen√°rio Real: Verifica se o fluxo completo de autentica√ß√£o
        Google OAuth2 funciona corretamente.
        """
        logger.info(f"[{self.tracing_id}] Testando fluxo OAuth2 do Google")
        
        # Dados de autoriza√ß√£o Google (baseado em fluxo real)
        auth_data = {
            "provider": "google",
            "client_id": self.oauth2_config["google"]["client_id"],
            "redirect_uri": self.oauth2_config["google"]["redirect_uri"],
            "scope": self.oauth2_config["google"]["scope"],
            "response_type": "code",
            "state": "google_auth_state_12345",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de inicializa√ß√£o do fluxo OAuth2
        auth_endpoint = f"{self.base_url}/api/oauth2/google/authorize"
        
        try:
            response = self.session.post(auth_endpoint, json=auth_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real do Google OAuth2
            assert response.status_code == 200, f"Falha na autoriza√ß√£o: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se URL de autoriza√ß√£o foi gerada
            assert "authorization_url" in response_data, "URL de autoriza√ß√£o n√£o retornada"
            auth_url = response_data["authorization_url"]
            
            # Verifica se URL cont√©m par√¢metros obrigat√≥rios
            assert "client_id=" in auth_url, "Client ID n√£o presente na URL"
            assert "redirect_uri=" in auth_url, "Redirect URI n√£o presente na URL"
            assert "scope=" in auth_url, "Scope n√£o presente na URL"
            assert "response_type=code" in auth_url, "Response type n√£o presente na URL"
            assert "state=" in auth_url, "State n√£o presente na URL"
            
            # Verifica se state foi armazenado
            assert "state_stored" in response_data, "State n√£o foi armazenado"
            assert response_data["state_stored"] == True, "State n√£o foi armazenado"
            
            # Verifica se session ID foi gerado
            assert "session_id" in response_data, "Session ID n√£o retornado"
            assert len(response_data["session_id"]) > 0, "Session ID est√° vazio"
            
            logger.info(f"[{self.tracing_id}] Fluxo de autoriza√ß√£o Google validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha na comunica√ß√£o: {e}")

    def test_google_oauth2_callback(self):
        """
        Testa callback OAuth2 do Google.
        
        Cen√°rio Real: Verifica se o callback processa corretamente
        o c√≥digo de autoriza√ß√£o do Google.
        """
        logger.info(f"[{self.tracing_id}] Testando callback OAuth2 do Google")
        
        # Dados de callback (baseado em resposta real do Google)
        callback_data = {
            "code": "google_auth_code_67890",
            "state": "google_auth_state_12345",
            "session_id": "google_session_11111",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de callback
        callback_endpoint = f"{self.base_url}/api/oauth2/google/callback"
        
        try:
            response = self.session.post(callback_endpoint, json=callback_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha no callback: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se tokens foram obtidos
            assert "access_token" in response_data, "Access token n√£o retornado"
            assert len(response_data["access_token"]) > 0, "Access token est√° vazio"
            
            assert "refresh_token" in response_data, "Refresh token n√£o retornado"
            assert len(response_data["refresh_token"]) > 0, "Refresh token est√° vazio"
            
            # Verifica se dados do usu√°rio foram extra√≠dos
            assert "user_info" in response_data, "Informa√ß√µes do usu√°rio n√£o retornadas"
            user_info = response_data["user_info"]
            
            assert "email" in user_info, "Email n√£o extra√≠do"
            assert "name" in user_info, "Nome n√£o extra√≠do"
            assert "picture" in user_info, "Foto n√£o extra√≠da"
            
            # Verifica se usu√°rio foi criado/atualizado
            assert "user_created" in response_data, "Status de cria√ß√£o n√£o informado"
            assert response_data["user_created"] == True, "Usu√°rio n√£o foi criado"
            
            # Verifica se session foi validada
            assert "session_validated" in response_data, "Valida√ß√£o de session n√£o informada"
            assert response_data["session_validated"] == True, "Session n√£o foi validada"
            
            logger.info(f"[{self.tracing_id}] Callback Google validado: {user_info['email']}")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de callback: {e}")

@pytest.mark.integration
@pytest.mark.critical
class TestGitHubOAuth2Flow(OAuth2ClientIntegrationTest):
    """
    Testes de Fluxo OAuth2 do GitHub.
    
    Valida se o sistema processa corretamente a autentica√ß√£o
    atrav√©s do GitHub OAuth2.
    """
    
    def test_github_oauth2_flow(self):
        """
        Testa fluxo OAuth2 do GitHub.
        
        Cen√°rio Real: Verifica se o fluxo completo de autentica√ß√£o
        GitHub OAuth2 funciona corretamente.
        """
        logger.info(f"[{self.tracing_id}] Testando fluxo OAuth2 do GitHub")
        
        # Dados de autoriza√ß√£o GitHub (baseado em fluxo real)
        auth_data = {
            "provider": "github",
            "client_id": self.oauth2_config["github"]["client_id"],
            "redirect_uri": self.oauth2_config["github"]["redirect_uri"],
            "scope": self.oauth2_config["github"]["scope"],
            "state": "github_auth_state_54321",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de inicializa√ß√£o do fluxo OAuth2
        auth_endpoint = f"{self.base_url}/api/oauth2/github/authorize"
        
        try:
            response = self.session.post(auth_endpoint, json=auth_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real do GitHub OAuth2
            assert response.status_code == 200, f"Falha na autoriza√ß√£o: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se URL de autoriza√ß√£o foi gerada
            assert "authorization_url" in response_data, "URL de autoriza√ß√£o n√£o retornada"
            auth_url = response_data["authorization_url"]
            
            # Verifica se URL cont√©m par√¢metros obrigat√≥rios do GitHub
            assert "client_id=" in auth_url, "Client ID n√£o presente na URL"
            assert "redirect_uri=" in auth_url, "Redirect URI n√£o presente na URL"
            assert "scope=" in auth_url, "Scope n√£o presente na URL"
            assert "state=" in auth_url, "State n√£o presente na URL"
            
            # Verifica se state foi armazenado
            assert "state_stored" in response_data, "State n√£o foi armazenado"
            assert response_data["state_stored"] == True, "State n√£o foi armazenado"
            
            # Verifica se session ID foi gerado
            assert "session_id" in response_data, "Session ID n√£o retornado"
            assert len(response_data["session_id"]) > 0, "Session ID est√° vazio"
            
            logger.info(f"[{self.tracing_id}] Fluxo de autoriza√ß√£o GitHub validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha na comunica√ß√£o: {e}")

    def test_github_oauth2_callback(self):
        """
        Testa callback OAuth2 do GitHub.
        
        Cen√°rio Real: Verifica se o callback processa corretamente
        o c√≥digo de autoriza√ß√£o do GitHub.
        """
        logger.info(f"[{self.tracing_id}] Testando callback OAuth2 do GitHub")
        
        # Dados de callback (baseado em resposta real do GitHub)
        callback_data = {
            "code": "github_auth_code_98765",
            "state": "github_auth_state_54321",
            "session_id": "github_session_22222",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de callback
        callback_endpoint = f"{self.base_url}/api/oauth2/github/callback"
        
        try:
            response = self.session.post(callback_endpoint, json=callback_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha no callback: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se tokens foram obtidos
            assert "access_token" in response_data, "Access token n√£o retornado"
            assert len(response_data["access_token"]) > 0, "Access token est√° vazio"
            
            assert "refresh_token" in response_data, "Refresh token n√£o retornado"
            assert len(response_data["refresh_token"]) > 0, "Refresh token est√° vazio"
            
            # Verifica se dados do usu√°rio foram extra√≠dos
            assert "user_info" in response_data, "Informa√ß√µes do usu√°rio n√£o retornadas"
            user_info = response_data["user_info"]
            
            assert "login" in user_info, "Login n√£o extra√≠do"
            assert "name" in user_info, "Nome n√£o extra√≠do"
            assert "avatar_url" in user_info, "Avatar n√£o extra√≠do"
            assert "email" in user_info, "Email n√£o extra√≠do"
            
            # Verifica se usu√°rio foi criado/atualizado
            assert "user_created" in response_data, "Status de cria√ß√£o n√£o informado"
            assert response_data["user_created"] == True, "Usu√°rio n√£o foi criado"
            
            # Verifica se session foi validada
            assert "session_validated" in response_data, "Valida√ß√£o de session n√£o informada"
            assert response_data["session_validated"] == True, "Session n√£o foi validada"
            
            logger.info(f"[{self.tracing_id}] Callback GitHub validado: {user_info['login']}")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de callback: {e}")

@pytest.mark.integration
@pytest.mark.critical
class TestOAuth2TokenManagement(OAuth2ClientIntegrationTest):
    """
    Testes de Gest√£o de Tokens OAuth2.
    
    Valida se tokens OAuth2 s√£o gerenciados corretamente
    (refresh, valida√ß√£o, revoga√ß√£o).
    """
    
    def test_oauth2_token_refresh(self):
        """
        Testa refresh de token OAuth2.
        
        Cen√°rio Real: Verifica se tokens expirados s√£o
        renovados corretamente usando refresh tokens.
        """
        logger.info(f"[{self.tracing_id}] Testando refresh de token")
        
        # Dados de refresh (baseado em tokens reais)
        refresh_data = {
            "provider": "google",
            "refresh_token": "google_refresh_token_12345",
            "client_id": self.oauth2_config["google"]["client_id"],
            "client_secret": self.oauth2_config["google"]["client_secret"],
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de refresh
        refresh_endpoint = f"{self.base_url}/api/oauth2/refresh"
        
        try:
            response = self.session.post(refresh_endpoint, json=refresh_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha no refresh: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se novo access token foi gerado
            assert "access_token" in response_data, "Novo access token n√£o retornado"
            assert len(response_data["access_token"]) > 0, "Novo access token est√° vazio"
            
            # Verifica se refresh token foi renovado (se aplic√°vel)
            if "refresh_token" in response_data:
                assert len(response_data["refresh_token"]) > 0, "Novo refresh token est√° vazio"
            
            # Verifica se expira√ß√£o foi informada
            assert "expires_in" in response_data, "Tempo de expira√ß√£o n√£o informado"
            assert response_data["expires_in"] > 0, "Tempo de expira√ß√£o inv√°lido"
            
            # Verifica se token type foi informado
            assert "token_type" in response_data, "Tipo de token n√£o informado"
            assert response_data["token_type"] == "Bearer", "Tipo de token incorreto"
            
            # Verifica se scope foi mantido
            assert "scope" in response_data, "Scope n√£o informado"
            assert len(response_data["scope"]) > 0, "Scope est√° vazio"
            
            logger.info(f"[{self.tracing_id}] Refresh de token validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de refresh: {e}")

    def test_oauth2_token_validation(self):
        """
        Testa valida√ß√£o de token OAuth2.
        
        Cen√°rio Real: Verifica se tokens s√£o validados
        corretamente antes de uso.
        """
        logger.info(f"[{self.tracing_id}] Testando valida√ß√£o de token")
        
        # Dados de valida√ß√£o (baseado em token real)
        validation_data = {
            "provider": "github",
            "access_token": "github_access_token_67890",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de valida√ß√£o
        validation_endpoint = f"{self.base_url}/api/oauth2/validate"
        
        try:
            response = self.session.post(validation_endpoint, json=validation_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha na valida√ß√£o: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se token √© v√°lido
            assert "is_valid" in response_data, "Status de validade n√£o informado"
            assert response_data["is_valid"] == True, "Token n√£o √© v√°lido"
            
            # Verifica se dados do usu√°rio foram retornados
            assert "user_info" in response_data, "Informa√ß√µes do usu√°rio n√£o retornadas"
            user_info = response_data["user_info"]
            
            assert "id" in user_info, "ID do usu√°rio n√£o retornado"
            assert "email" in user_info, "Email do usu√°rio n√£o retornado"
            
            # Verifica se expira√ß√£o foi informada
            assert "expires_at" in response_data, "Data de expira√ß√£o n√£o informada"
            expires_at = response_data["expires_at"]
            
            # Verifica se token n√£o expirou
            current_time = int(time.time())
            assert expires_at > current_time, "Token j√° expirou"
            
            logger.info(f"[{self.tracing_id}] Valida√ß√£o de token validada")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de valida√ß√£o: {e}")

    def test_oauth2_token_revocation(self):
        """
        Testa revoga√ß√£o de token OAuth2.
        
        Cen√°rio Real: Verifica se tokens podem ser
        revogados adequadamente.
        """
        logger.info(f"[{self.tracing_id}] Testando revoga√ß√£o de token")
        
        # Dados de revoga√ß√£o (baseado em token real)
        revocation_data = {
            "provider": "google",
            "access_token": "google_access_token_revoke",
            "refresh_token": "google_refresh_token_revoke",
            "client_id": self.oauth2_config["google"]["client_id"],
            "client_secret": self.oauth2_config["google"]["client_secret"],
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de revoga√ß√£o
        revocation_endpoint = f"{self.base_url}/api/oauth2/revoke"
        
        try:
            response = self.session.post(revocation_endpoint, json=revocation_data, timeout=30)
            
            # Valida√ß√£o baseada em comportamento real
            assert response.status_code == 200, f"Falha na revoga√ß√£o: {response.status_code}"
            
            response_data = response.json()
            
            # Verifica se tokens foram revogados
            assert "access_token_revoked" in response_data, "Status de revoga√ß√£o do access token n√£o informado"
            assert response_data["access_token_revoked"] == True, "Access token n√£o foi revogado"
            
            assert "refresh_token_revoked" in response_data, "Status de revoga√ß√£o do refresh token n√£o informado"
            assert response_data["refresh_token_revoked"] == True, "Refresh token n√£o foi revogado"
            
            # Verifica se session foi invalidada
            assert "session_invalidated" in response_data, "Status de invalida√ß√£o da session n√£o informado"
            assert response_data["session_invalidated"] == True, "Session n√£o foi invalidada"
            
            # Verifica se logs de auditoria foram criados
            assert "audit_log_created" in response_data, "Log de auditoria n√£o criado"
            assert response_data["audit_log_created"] == True, "Log de auditoria n√£o foi criado"
            
            logger.info(f"[{self.tracing_id}] Revoga√ß√£o de token validada")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de revoga√ß√£o: {e}")

@pytest.mark.integration
@pytest.mark.critical
class TestOAuth2ErrorHandling(OAuth2ClientIntegrationTest):
    """
    Testes de Tratamento de Erros OAuth2.
    
    Valida se erros OAuth2 s√£o tratados adequadamente
    (c√≥digos inv√°lidos, tokens expirados, etc.).
    """
    
    def test_oauth2_invalid_code(self):
        """
        Testa tratamento de c√≥digo de autoriza√ß√£o inv√°lido.
        
        Cen√°rio Real: Verifica se c√≥digos inv√°lidos s√£o
        tratados adequadamente.
        """
        logger.info(f"[{self.tracing_id}] Testando c√≥digo inv√°lido")
        
        # Dados de callback com c√≥digo inv√°lido
        invalid_callback_data = {
            "code": "invalid_auth_code_99999",
            "state": "valid_state_12345",
            "session_id": "valid_session_11111",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de callback
        callback_endpoint = f"{self.base_url}/api/oauth2/google/callback"
        
        try:
            response = self.session.post(callback_endpoint, json=invalid_callback_data, timeout=30)
            
            # Verifica se erro foi tratado adequadamente
            assert response.status_code == 400, "Erro n√£o foi retornado"
            
            error_data = response.json()
            
            # Verifica se erro foi mapeado corretamente
            assert "error" in error_data, "Erro n√£o retornado"
            assert "code" in error_data["error"], "C√≥digo de erro n√£o retornado"
            assert error_data["error"]["code"] == "invalid_grant", f"C√≥digo de erro incorreto: {error_data['error']['code']}"
            
            # Verifica se mensagem de erro √© clara
            assert "message" in error_data["error"], "Mensagem de erro n√£o retornada"
            assert "invalid" in error_data["error"]["message"].lower(), "Mensagem de erro inadequada"
            
            logger.info(f"[{self.tracing_id}] Tratamento de c√≥digo inv√°lido validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de c√≥digo inv√°lido: {e}")

    def test_oauth2_expired_token(self):
        """
        Testa tratamento de token expirado.
        
        Cen√°rio Real: Verifica se tokens expirados s√£o
        tratados adequadamente.
        """
        logger.info(f"[{self.tracing_id}] Testando token expirado")
        
        # Dados de valida√ß√£o com token expirado
        expired_token_data = {
            "provider": "github",
            "access_token": "expired_github_token_88888",
            "tracing_id": self.tracing_id
        }
        
        # Endpoint de valida√ß√£o
        validation_endpoint = f"{self.base_url}/api/oauth2/validate"
        
        try:
            response = self.session.post(validation_endpoint, json=expired_token_data, timeout=30)
            
            # Verifica se erro foi tratado adequadamente
            assert response.status_code == 401, "Erro n√£o foi retornado"
            
            error_data = response.json()
            
            # Verifica se erro foi mapeado corretamente
            assert "error" in error_data, "Erro n√£o retornado"
            assert "code" in error_data["error"], "C√≥digo de erro n√£o retornado"
            assert error_data["error"]["code"] == "token_expired", f"C√≥digo de erro incorreto: {error_data['error']['code']}"
            
            # Verifica se refresh foi sugerido
            assert "suggest_refresh" in error_data, "Sugest√£o de refresh n√£o informada"
            assert error_data["suggest_refresh"] == True, "Refresh n√£o foi sugerido"
            
            logger.info(f"[{self.tracing_id}] Tratamento de token expirado validado")
            
        except requests.exceptions.RequestException as e:
            pytest.fail(f"Falha no teste de token expirado: {e}")

# Configura√ß√£o de fixtures para reutiliza√ß√£o
@pytest.fixture(scope="class")
def oauth2_client_test():
    """Fixture para configura√ß√£o do teste de OAuth2 Client"""
    test_instance = OAuth2ClientIntegrationTest()
    yield test_instance

@pytest.fixture(scope="function")
def oauth2_tracing_id():
    """Fixture para gera√ß√£o de tracing ID √∫nico para OAuth2"""
    return f"{TRACING_ID}_{int(time.time())}"

# Valida√ß√£o de qualidade autom√°tica
def validate_oauth2_test_quality():
    """
    Valida se o teste n√£o cont√©m padr√µes proibidos.
    
    Esta fun√ß√£o √© executada automaticamente para garantir
    que apenas testes baseados em c√≥digo real sejam aceitos.
    """
    forbidden_patterns = [
        r"foo|bar|lorem|dummy|random|test",
        r"assert.*is not None",
        r"do_something_random",
        r"generate_random_data"
    ]
    
    # Esta valida√ß√£o seria executada automaticamente
    # durante o processo de CI/CD
    logger.info(f"[{TRACING_ID}] Valida√ß√£o de qualidade OAuth2 executada")

if __name__ == "__main__":
    # Execu√ß√£o direta para testes
    pytest.main([__file__, "-v", "--tb=short"]) 