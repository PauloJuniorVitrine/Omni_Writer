# üîê MIDDLEWARE DE AUTENTICA√á√ÉO
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: C√≥digo sint√©tico, gen√©rico ou aleat√≥rio
# ‚úÖ PERMITIDO: Apenas c√≥digo baseado em requisitos reais do Omni Writer

"""
Middleware de Autentica√ß√£o
==========================

Este m√≥dulo implementa autentica√ß√£o e autoriza√ß√£o para endpoints
protegidos do sistema Omni Writer.
"""

import jwt
import time
import logging
from functools import wraps
from typing import Dict, Any, Optional, Callable
from flask import request, jsonify, g, current_app
from werkzeug.exceptions import Unauthorized, Forbidden

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "AUTH_MIDDLEWARE_20250127_001"

class AuthMiddleware:
    """
    Middleware de autentica√ß√£o e autoriza√ß√£o.
    
    Funcionalidades:
    - Valida√ß√£o de tokens JWT
    - Verifica√ß√£o de permiss√µes
    - Contexto de usu√°rio
    - Rate limiting por usu√°rio
    """
    
    def __init__(self, app=None):
        self.app = app
        self.secret_key = "omni_writer_secret_key_2025"
        self.algorithm = "HS256"
        self.tracing_id = TRACING_ID
        
        # Configura√ß√µes de seguran√ßa
        self.token_expiry = 3600  # 1 hora
        self.refresh_expiry = 604800  # 7 dias
        
        # Cache de tokens (em produ√ß√£o usar Redis)
        self.token_cache = {}
        
        if app is not None:
            self.init_app(app)
    
    def init_app(self, app):
        """Inicializa o middleware com a aplica√ß√£o Flask"""
        app.before_request(self.before_request)
        app.after_request(self.after_request)
        
        # Registra fun√ß√µes de template para debug
        app.context_processor(self.context_processor)
        
        logger.info(f"[{self.tracing_id}] Middleware de autentica√ß√£o inicializado")
    
    def before_request(self):
        """Executado antes de cada request"""
        # Endpoints p√∫blicos que n√£o precisam de autentica√ß√£o
        public_endpoints = [
            '/health',
            '/metrics',
            '/docs',
            '/openapi.json',
            '/generate',  # Endpoint principal (pode ser p√∫blico)
            '/download',
            '/export_prompts',
            '/export_artigos_csv',
            '/feedback',
            '/webhook'
        ]
        
        # Verifica se √© endpoint p√∫blico
        if request.endpoint and any(ep in request.path for ep in public_endpoints):
            return None
        
        # Para endpoints protegidos, valida autentica√ß√£o
        if request.path.startswith('/api/protected'):
            return self.validate_protected_endpoint()
        
        return None
    
    def after_request(self, response):
        """Executado ap√≥s cada request"""
        # Adiciona headers de seguran√ßa
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        
        return response
    
    def context_processor(self):
        """Contexto para templates"""
        return {
            'current_user': getattr(g, 'user', None),
            'is_authenticated': hasattr(g, 'user')
        }
    
    def validate_protected_endpoint(self):
        """Valida endpoint protegido"""
        logger.info(f"[{self.tracing_id}] Validando endpoint protegido: {request.path}")
        
        # Extrai token do header
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            logger.warning(f"[{self.tracing_id}] Token n√£o fornecido")
            return self.unauthorized_response("Token n√£o fornecido")
        
        # Valida formato do token
        if not auth_header.startswith('Bearer '):
            logger.warning(f"[{self.tracing_id}] Formato de token inv√°lido")
            return self.unauthorized_response("Formato de token inv√°lido")
        
        token = auth_header.split(' ')[1]
        
        # Valida token
        try:
            user_data = self.validate_token(token)
            if not user_data:
                logger.warning(f"[{self.tracing_id}] Token inv√°lido")
                return self.unauthorized_response("Token inv√°lido")
            
            # Define contexto de usu√°rio
            g.user = user_data
            g.token = token
            
            # Verifica permiss√µes
            if not self.check_permissions(user_data, request.path, request.method):
                logger.warning(f"[{self.tracing_id}] Permiss√£o negada para usu√°rio {user_data.get('user_id')}")
                return self.forbidden_response("Permiss√£o negada")
            
            logger.info(f"[{self.tracing_id}] Autentica√ß√£o v√°lida para usu√°rio {user_data.get('user_id')}")
            return None
            
        except jwt.ExpiredSignatureError:
            logger.warning(f"[{self.tracing_id}] Token expirado")
            return self.unauthorized_response("Token expirado")
        except jwt.InvalidTokenError as e:
            logger.warning(f"[{self.tracing_id}] Token inv√°lido: {e}")
            return self.unauthorized_response("Token inv√°lido")
        except Exception as e:
            logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o: {e}")
            return self.unauthorized_response("Erro na valida√ß√£o")
    
    def validate_token(self, token: str) -> Optional[Dict[str, Any]]:
        """
        Valida token JWT.
        
        Args:
            token: Token JWT a ser validado
            
        Returns:
            Dados do usu√°rio se token v√°lido, None caso contr√°rio
        """
        try:
            # Decodifica token
            payload = jwt.decode(
                token,
                self.secret_key,
                algorithms=[self.algorithm],
                options={
                    'verify_signature': True,
                    'verify_exp': True,
                    'verify_iat': True
                }
            )
            
            # Valida√ß√µes adicionais
            if not self.validate_payload(payload):
                return None
            
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning(f"[{self.tracing_id}] Token expirado")
            raise
        except jwt.InvalidTokenError as e:
            logger.warning(f"[{self.tracing_id}] Token inv√°lido: {e}")
            raise
    
    def validate_payload(self, payload: Dict[str, Any]) -> bool:
        """
        Valida payload do token.
        
        Args:
            payload: Payload do token JWT
            
        Returns:
            True se payload v√°lido, False caso contr√°rio
        """
        required_fields = ['user_id', 'email', 'exp', 'iat']
        
        # Verifica campos obrigat√≥rios
        for field in required_fields:
            if field not in payload:
                logger.warning(f"[{self.tracing_id}] Campo obrigat√≥rio ausente: {field}")
                return False
        
        # Verifica se n√£o expirou
        current_time = int(time.time())
        if payload['exp'] < current_time:
            logger.warning(f"[{self.tracing_id}] Token expirado")
            return False
        
        # Verifica se foi emitido no futuro (clock skew)
        if payload['iat'] > current_time + 300:  # 5 minutos de toler√¢ncia
            logger.warning(f"[{self.tracing_id}] Token emitido no futuro")
            return False
        
        return True
    
    def check_permissions(self, user_data: Dict[str, Any], path: str, method: str) -> bool:
        """
        Verifica permiss√µes do usu√°rio.
        
        Args:
            user_data: Dados do usu√°rio
            path: Caminho da requisi√ß√£o
            method: M√©todo HTTP
            
        Returns:
            True se usu√°rio tem permiss√£o, False caso contr√°rio
        """
        user_id = user_data.get('user_id')
        user_role = user_data.get('role', 'user')
        
        # Permiss√µes por role
        permissions = {
            'admin': ['GET', 'POST', 'PUT', 'DELETE'],
            'moderator': ['GET', 'POST', 'PUT'],
            'user': ['GET', 'POST'],
            'readonly': ['GET']
        }
        
        # Verifica se role existe
        if user_role not in permissions:
            logger.warning(f"[{self.tracing_id}] Role inv√°lida: {user_role}")
            return False
        
        # Verifica se m√©todo √© permitido para o role
        if method not in permissions[user_role]:
            logger.warning(f"[{self.tracing_id}] M√©todo {method} n√£o permitido para role {user_role}")
            return False
        
        # Verifica√ß√µes espec√≠ficas por endpoint
        if path.startswith('/api/protected/admin') and user_role != 'admin':
            logger.warning(f"[{self.tracing_id}] Acesso negado a endpoint admin para role {user_role}")
            return False
        
        if path.startswith('/api/protected/moderator') and user_role not in ['admin', 'moderator']:
            logger.warning(f"[{self.tracing_id}] Acesso negado a endpoint moderator para role {user_role}")
            return False
        
        return True
    
    def generate_token(self, user_data: Dict[str, Any]) -> str:
        """
        Gera token JWT para usu√°rio.
        
        Args:
            user_data: Dados do usu√°rio
            
        Returns:
            Token JWT gerado
        """
        payload = {
            'user_id': user_data['user_id'],
            'email': user_data['email'],
            'role': user_data.get('role', 'user'),
            'iat': int(time.time()),
            'exp': int(time.time()) + self.token_expiry
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
        
        # Cache do token
        self.token_cache[token] = {
            'user_data': user_data,
            'created_at': time.time()
        }
        
        logger.info(f"[{self.tracing_id}] Token gerado para usu√°rio {user_data['user_id']}")
        return token
    
    def refresh_token(self, token: str) -> Optional[str]:
        """
        Renova token JWT.
        
        Args:
            token: Token atual
            
        Returns:
            Novo token se v√°lido, None caso contr√°rio
        """
        try:
            # Valida token atual
            user_data = self.validate_token(token)
            if not user_data:
                return None
            
            # Gera novo token
            new_token = self.generate_token(user_data)
            
            # Remove token antigo do cache
            if token in self.token_cache:
                del self.token_cache[token]
            
            logger.info(f"[{self.tracing_id}] Token renovado para usu√°rio {user_data['user_id']}")
            return new_token
            
        except Exception as e:
            logger.error(f"[{self.tracing_id}] Erro ao renovar token: {e}")
            return None
    
    def unauthorized_response(self, message: str):
        """Resposta para n√£o autorizado"""
        return jsonify({
            'error': 'Unauthorized',
            'message': message,
            'tracing_id': self.tracing_id
        }), 401
    
    def forbidden_response(self, message: str):
        """Resposta para acesso negado"""
        return jsonify({
            'error': 'Forbidden',
            'message': message,
            'tracing_id': self.tracing_id
        }), 403

# Decorator para endpoints protegidos
def require_auth(f):
    """Decorator para endpoints que requerem autentica√ß√£o"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # Verifica se usu√°rio est√° autenticado
        if not hasattr(g, 'user'):
            return jsonify({
                'error': 'Unauthorized',
                'message': 'Autentica√ß√£o requerida',
                'tracing_id': TRACING_ID
            }), 401
        
        return f(*args, **kwargs)
    return decorated_function

# Decorator para verifica√ß√£o de permiss√µes
def require_permission(permission: str):
    """Decorator para verifica√ß√£o de permiss√µes espec√≠ficas"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not hasattr(g, 'user'):
                return jsonify({
                    'error': 'Unauthorized',
                    'message': 'Autentica√ß√£o requerida',
                    'tracing_id': TRACING_ID
                }), 401
            
            user_role = g.user.get('role', 'user')
            if permission not in get_user_permissions(user_role):
                return jsonify({
                    'error': 'Forbidden',
                    'message': f'Permiss√£o {permission} requerida',
                    'tracing_id': TRACING_ID
                }), 403
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def get_user_permissions(role: str) -> list:
    """Retorna permiss√µes do usu√°rio baseado no role"""
    permissions = {
        'admin': ['read', 'write', 'delete', 'admin'],
        'moderator': ['read', 'write', 'moderate'],
        'user': ['read', 'write'],
        'readonly': ['read']
    }
    return permissions.get(role, [])

# Inst√¢ncia global do middleware
auth_middleware = AuthMiddleware()

# Fun√ß√µes de utilidade para testes
def create_test_token(user_id: str, email: str, role: str = 'user') -> str:
    """Cria token de teste para testes de integra√ß√£o"""
    user_data = {
        'user_id': user_id,
        'email': email,
        'role': role
    }
    return auth_middleware.generate_token(user_data)

def validate_test_token(token: str) -> Optional[Dict[str, Any]]:
    """Valida token de teste"""
    return auth_middleware.validate_token(token) 