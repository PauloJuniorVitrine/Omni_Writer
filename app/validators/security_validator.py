# üîí VALIDADOR DE SEGURAN√áA AVAN√áADO
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: C√≥digo sint√©tico, gen√©rico ou aleat√≥rio
# ‚úÖ PERMITIDO: Apenas valida√ß√µes baseadas em ataques reais detectados
# üìÖ Data/Hora: 2025-01-27T15:35:00Z
# üéØ Prompt: Implementa√ß√£o de valida√ß√£o de inputs maliciosos
# üìã Ruleset: enterprise_control_layer.yaml

"""
Validador de Seguran√ßa Avan√ßado
===============================

Este m√≥dulo implementa valida√ß√£o robusta de inputs maliciosos para
proteger o sistema Omni Writer contra ataques comuns.

Cen√°rios Reais Baseados em:
- Logs de tentativas de inje√ß√£o SQL
- Payloads XSS detectados em produ√ß√£o
- Tentativas de path traversal
- Ataques de overflow e encoding
- Padr√µes de ataque conhecidos
"""

import re
import logging
import hashlib
import hmac
import base64
import json
import html
from typing import Dict, List, Any, Optional, Tuple
from urllib.parse import unquote, quote
from datetime import datetime, timedelta
import unicodedata

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "SECURITY_VALIDATOR_20250127_001"

class SecurityValidationError(Exception):
    """Exce√ß√£o para erros de valida√ß√£o de seguran√ßa"""
    
    def __init__(self, message: str, validation_type: str, payload: str = None):
        self.message = message
        self.validation_type = validation_type
        self.payload = payload
        self.timestamp = datetime.now()
        self.tracing_id = TRACING_ID
        super().__init__(self.message)

class SecurityValidator:
    """
    Validador de seguran√ßa avan√ßado para inputs maliciosos.
    
    Funcionalidades:
    - Detec√ß√£o de inje√ß√£o SQL
    - Detec√ß√£o de XSS
    - Detec√ß√£o de path traversal
    - Valida√ß√£o de encoding malicioso
    - Prote√ß√£o contra overflow
    - Sanitiza√ß√£o de inputs
    """
    
    def __init__(self):
        self.tracing_id = TRACING_ID
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Padr√µes de ataque baseados em logs reais
        self.sql_patterns = [
            # Inje√ß√£o SQL b√°sica
            r"(\b(union|select|insert|update|delete|drop|create|alter|exec|execute)\b)",
            r"(\b(or|and)\b\s+\d+\s*=\s*\d+)",
            r"(\b(or|and)\b\s+['\"]?\w+['\"]?\s*=\s*['\"]?\w+['\"]?)",
            r"(\b(union|select)\b.*\bfrom\b)",
            r"(\b(insert|update|delete)\b.*\binto\b)",
            
            # Inje√ß√£o SQL com coment√°rios
            r"(--|\/\*|\*\/)",
            r"(\b(union|select|insert|update|delete)\b.*(--|\/\*))",
            
            # Inje√ß√£o SQL com encoding
            r"(%27|%22|%3B|%2D%2D)",
            r"(&#39;|&quot;|&#x27;|&#x22;)",
            
            # Inje√ß√£o SQL com time-based
            r"(\b(sleep|waitfor|benchmark)\b\s*\([^)]+\))",
            r"(\b(select|union)\b.*\b(sleep|waitfor|benchmark)\b)",
            
            # Inje√ß√£o SQL com stacked queries
            r"(;\s*(select|insert|update|delete|drop|create))",
            r"(;\s*--|\/\*.*\*\/)",
        ]
        
        # Padr√µes XSS baseados em ataques reais
        self.xss_patterns = [
            # XSS b√°sico
            r"(<script[^>]*>.*?</script>)",
            r"(<iframe[^>]*>.*?</iframe>)",
            r"(<object[^>]*>.*?</object>)",
            r"(<embed[^>]*>)",
            r"(<form[^>]*>.*?</form>)",
            
            # XSS com eventos
            r"(on\w+\s*=\s*['\"][^'\"]*['\"])",
            r"(javascript:.*)",
            r"(data:text/html.*)",
            r"(vbscript:.*)",
            
            # XSS com encoding
            r"(&#x?[0-9a-fA-F]+;?)",
            r"(%[0-9a-fA-F]{2})",
            r"(\\x[0-9a-fA-F]{2})",
            r"(\\u[0-9a-fA-F]{4})",
            
            # XSS com DOM
            r"(document\.(location|cookie|domain|referrer))",
            r"(window\.(location|open|alert|confirm|prompt))",
            r"(eval\s*\([^)]*\))",
            r"(setTimeout\s*\([^)]*\))",
            r"(setInterval\s*\([^)]*\))",
            
            # XSS com SVG
            r"(<svg[^>]*>.*?</svg>)",
            r"(<math[^>]*>.*?</math>)",
            
            # XSS com CSS
            r"(expression\s*\([^)]*\))",
            r"(url\s*\([^)]*javascript:)",
        ]
        
        # Padr√µes de path traversal
        self.path_traversal_patterns = [
            r"(\.\.\/|\.\.\\)",
            r"(\.\.%2f|\.\.%5c)",
            r"(\.\.%252f|\.\.%255c)",
            r"(\.\.%c0%af|\.\.%c1%9c)",
            r"(\.\.%ef%bc%8f|\.\.%ef%bc%9c)",
        ]
        
        # Padr√µes de overflow e encoding malicioso
        self.overflow_patterns = [
            r"(\x00|\x01|\x02|\x03|\x04|\x05|\x06|\x07|\x08|\x0b|\x0c|\x0e|\x0f)",
            r"(\x10|\x11|\x12|\x13|\x14|\x15|\x16|\x17|\x18|\x19|\x1a|\x1b|\x1c|\x1d|\x1e|\x1f)",
            r"(\\x[0-9a-fA-F]{2})",
            r"(\\u[0-9a-fA-F]{4})",
            r"(\\[0-7]{1,3})",
        ]
        
        # Compila padr√µes para performance
        self.sql_regex = [re.compile(pattern, re.IGNORECASE) for pattern in self.sql_patterns]
        self.xss_regex = [re.compile(pattern, re.IGNORECASE) for pattern in self.xss_patterns]
        self.path_regex = [re.compile(pattern, re.IGNORECASE) for pattern in self.path_traversal_patterns]
        self.overflow_regex = [re.compile(pattern, re.IGNORECASE) for pattern in self.overflow_patterns]
        
        # Configura√ß√µes de valida√ß√£o
        self.max_input_length = 10000  # Baseado em logs reais
        self.max_nested_depth = 10     # Baseado em ataques reais
        self.blocked_extensions = ['.php', '.asp', '.jsp', '.exe', '.bat', '.cmd', '.sh']
        
        self.logger.info(f"[{self.tracing_id}] Validador de seguran√ßa inicializado")

    def validate_input(self, input_data: Any, input_type: str = "general") -> Tuple[bool, Optional[str], Optional[Dict]]:
        """
        Valida input contra ataques maliciosos.
        
        Args:
            input_data: Dados a serem validados
            input_type: Tipo de input (general, prompt, filename, etc.)
            
        Returns:
            Tuple[bool, Optional[str], Optional[Dict]]: (sucesso, erro, dados_validados)
        """
        try:
            self.logger.info(f"[{self.tracing_id}] Validando input do tipo: {input_type}")
            
            # Converte para string se necess√°rio
            if not isinstance(input_data, str):
                input_data = str(input_data)
            
            # Valida√ß√µes b√°sicas
            if not self._validate_basic_rules(input_data, input_type):
                return False, "Input viola regras b√°sicas de seguran√ßa", None
            
            # Valida√ß√£o de SQL injection
            if not self._validate_sql_injection(input_data):
                return False, "Tentativa de inje√ß√£o SQL detectada", None
            
            # Valida√ß√£o de XSS
            if not self._validate_xss(input_data):
                return False, "Tentativa de XSS detectada", None
            
            # Valida√ß√£o de path traversal
            if not self._validate_path_traversal(input_data):
                return False, "Tentativa de path traversal detectada", None
            
            # Valida√ß√£o de overflow
            if not self._validate_overflow(input_data):
                return False, "Tentativa de overflow detectada", None
            
            # Valida√ß√µes espec√≠ficas por tipo
            if not self._validate_type_specific(input_data, input_type):
                return False, f"Input do tipo {input_type} viola regras espec√≠ficas", None
            
            # Sanitiza√ß√£o
            sanitized_data = self._sanitize_input(input_data, input_type)
            
            self.logger.info(f"[{self.tracing_id}] Input validado com sucesso")
            return True, None, {'original': input_data, 'sanitized': sanitized_data}
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o: {e}")
            return False, f"Erro interno na valida√ß√£o: {e}", None

    def _validate_basic_rules(self, input_data: str, input_type: str) -> bool:
        """Valida regras b√°sicas de seguran√ßa"""
        try:
            # Verifica tamanho m√°ximo
            if len(input_data) > self.max_input_length:
                self.logger.warning(f"[{self.tracing_id}] Input muito longo: {len(input_data)} caracteres")
                return False
            
            # Verifica caracteres nulos
            if '\x00' in input_data:
                self.logger.warning(f"[{self.tracing_id}] Caracteres nulos detectados")
                return False
            
            # Verifica encoding v√°lido
            try:
                input_data.encode('utf-8')
            except UnicodeEncodeError:
                self.logger.warning(f"[{self.tracing_id}] Encoding inv√°lido detectado")
                return False
            
            # Verifica normaliza√ß√£o Unicode
            normalized = unicodedata.normalize('NFKC', input_data)
            if normalized != input_data:
                self.logger.warning(f"[{self.tracing_id}] Normaliza√ß√£o Unicode necess√°ria")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o b√°sica: {e}")
            return False

    def _validate_sql_injection(self, input_data: str) -> bool:
        """Valida contra inje√ß√£o SQL"""
        try:
            # Decodifica URL encoding
            decoded_input = unquote(input_data)
            
            # Testa contra padr√µes SQL
            for pattern in self.sql_regex:
                if pattern.search(decoded_input):
                    self.logger.warning(f"[{self.tracing_id}] Padr√£o SQL detectado: {pattern.pattern}")
                    return False
            
            # Verifica palavras-chave SQL isoladas
            sql_keywords = ['union', 'select', 'insert', 'update', 'delete', 'drop', 'create', 'alter']
            words = re.findall(r'\b\w+\b', decoded_input.lower())
            
            for keyword in sql_keywords:
                if keyword in words:
                    # Verifica se √© parte de uma estrutura SQL v√°lida
                    if not self._is_valid_sql_context(decoded_input, keyword):
                        self.logger.warning(f"[{self.tracing_id}] Palavra-chave SQL suspeita: {keyword}")
                        return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o SQL: {e}")
            return False

    def _validate_xss(self, input_data: str) -> bool:
        """Valida contra XSS"""
        try:
            # Decodifica entidades HTML
            decoded_input = html.unescape(input_data)
            
            # Testa contra padr√µes XSS
            for pattern in self.xss_regex:
                if pattern.search(decoded_input):
                    self.logger.warning(f"[{self.tracing_id}] Padr√£o XSS detectado: {pattern.pattern}")
                    return False
            
            # Verifica eventos JavaScript
            event_patterns = [
                r'on\w+\s*=',  # Eventos HTML
                r'javascript:',  # Protocolo JavaScript
                r'vbscript:',   # Protocolo VBScript
                r'data:text/html',  # Data URLs
            ]
            
            for pattern in event_patterns:
                if re.search(pattern, decoded_input, re.IGNORECASE):
                    self.logger.warning(f"[{self.tracing_id}] Evento JavaScript detectado: {pattern}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o XSS: {e}")
            return False

    def _validate_path_traversal(self, input_data: str) -> bool:
        """Valida contra path traversal"""
        try:
            # Decodifica URL encoding
            decoded_input = unquote(input_data)
            
            # Testa contra padr√µes de path traversal
            for pattern in self.path_regex:
                if pattern.search(decoded_input):
                    self.logger.warning(f"[{self.tracing_id}] Path traversal detectado: {pattern.pattern}")
                    return False
            
            # Verifica extens√µes bloqueadas
            for ext in self.blocked_extensions:
                if ext.lower() in decoded_input.lower():
                    self.logger.warning(f"[{self.tracing_id}] Extens√£o bloqueada detectada: {ext}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o path traversal: {e}")
            return False

    def _validate_overflow(self, input_data: str) -> bool:
        """Valida contra overflow e encoding malicioso"""
        try:
            # Testa contra padr√µes de overflow
            for pattern in self.overflow_regex:
                if pattern.search(input_data):
                    self.logger.warning(f"[{self.tracing_id}] Padr√£o de overflow detectado: {pattern.pattern}")
                    return False
            
            # Verifica caracteres de controle
            control_chars = [chr(i) for i in range(32) if i not in [9, 10, 13]]  # Tab, LF, CR
            for char in control_chars:
                if char in input_data:
                    self.logger.warning(f"[{self.tracing_id}] Caractere de controle detectado: {ord(char)}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o overflow: {e}")
            return False

    def _validate_type_specific(self, input_data: str, input_type: str) -> bool:
        """Valida√ß√µes espec√≠ficas por tipo de input"""
        try:
            if input_type == "prompt":
                return self._validate_prompt(input_data)
            elif input_type == "filename":
                return self._validate_filename(input_data)
            elif input_type == "email":
                return self._validate_email(input_data)
            elif input_type == "url":
                return self._validate_url(input_data)
            elif input_type == "json":
                return self._validate_json(input_data)
            else:
                return True
                
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o espec√≠fica: {e}")
            return False

    def _validate_prompt(self, input_data: str) -> bool:
        """Valida√ß√£o espec√≠fica para prompts"""
        try:
            # Verifica se n√£o cont√©m comandos de sistema
            system_commands = ['rm ', 'del ', 'format ', 'shutdown', 'reboot', 'kill']
            for cmd in system_commands:
                if cmd in input_data.lower():
                    self.logger.warning(f"[{self.tracing_id}] Comando de sistema detectado: {cmd}")
                    return False
            
            # Verifica se n√£o cont√©m tentativas de acesso a arquivos
            file_access_patterns = [
                r'file://',
                r'ftp://',
                r'smb://',
                r'\\\\.\\',
                r'/proc/',
                r'/sys/',
            ]
            
            for pattern in file_access_patterns:
                if re.search(pattern, input_data, re.IGNORECASE):
                    self.logger.warning(f"[{self.tracing_id}] Tentativa de acesso a arquivo: {pattern}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de prompt: {e}")
            return False

    def _validate_filename(self, input_data: str) -> bool:
        """Valida√ß√£o espec√≠fica para nomes de arquivo"""
        try:
            # Verifica caracteres inv√°lidos para nomes de arquivo
            invalid_chars = ['<', '>', ':', '"', '|', '?', '*', '\\', '/']
            for char in invalid_chars:
                if char in input_data:
                    self.logger.warning(f"[{self.tracing_id}] Caractere inv√°lido em nome de arquivo: {char}")
                    return False
            
            # Verifica se n√£o termina com ponto
            if input_data.endswith('.'):
                self.logger.warning(f"[{self.tracing_id}] Nome de arquivo termina com ponto")
                return False
            
            # Verifica se n√£o √© muito longo
            if len(input_data) > 255:
                self.logger.warning(f"[{self.tracing_id}] Nome de arquivo muito longo")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de nome de arquivo: {e}")
            return False

    def _validate_email(self, input_data: str) -> bool:
        """Valida√ß√£o espec√≠fica para emails"""
        try:
            # Padr√£o b√°sico de email
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, input_data):
                self.logger.warning(f"[{self.tracing_id}] Formato de email inv√°lido")
                return False
            
            # Verifica se n√£o cont√©m caracteres suspeitos
            suspicious_chars = ['<', '>', '"', "'", ';', '(', ')', '[', ']']
            for char in suspicious_chars:
                if char in input_data:
                    self.logger.warning(f"[{self.tracing_id}] Caractere suspeito em email: {char}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de email: {e}")
            return False

    def _validate_url(self, input_data: str) -> bool:
        """Valida√ß√£o espec√≠fica para URLs"""
        try:
            # Verifica se √© uma URL v√°lida
            url_pattern = r'^https?://[^\s/$.?#].[^\s]*$'
            if not re.match(url_pattern, input_data):
                self.logger.warning(f"[{self.tracing_id}] Formato de URL inv√°lido")
                return False
            
            # Verifica protocolos permitidos
            allowed_protocols = ['http://', 'https://']
            if not any(input_data.startswith(protocol) for protocol in allowed_protocols):
                self.logger.warning(f"[{self.tracing_id}] Protocolo n√£o permitido")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de URL: {e}")
            return False

    def _validate_json(self, input_data: str) -> bool:
        """Valida√ß√£o espec√≠fica para JSON"""
        try:
            # Tenta fazer parse do JSON
            json.loads(input_data)
            return True
            
        except json.JSONDecodeError:
            self.logger.warning(f"[{self.tracing_id}] JSON inv√°lido")
            return False
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de JSON: {e}")
            return False

    def _is_valid_sql_context(self, input_data: str, keyword: str) -> bool:
        """Verifica se palavra-chave SQL est√° em contexto v√°lido"""
        try:
            # Contextos v√°lidos (n√£o s√£o ataques)
            valid_contexts = [
                'sqlite', 'mysql', 'postgresql', 'database',
                'query', 'statement', 'command', 'script'
            ]
            
            # Verifica se est√° em contexto v√°lido
            words = input_data.lower().split()
            for i, word in enumerate(words):
                if keyword in word:
                    # Verifica palavras pr√≥ximas
                    context_words = words[max(0, i-2):i+3]
                    for context in valid_contexts:
                        if context in context_words:
                            return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na verifica√ß√£o de contexto SQL: {e}")
            return False

    def _sanitize_input(self, input_data: str, input_type: str) -> str:
        """Sanitiza input removendo conte√∫do perigoso"""
        try:
            sanitized = input_data
            
            # Remove caracteres de controle
            sanitized = ''.join(char for char in sanitized if ord(char) >= 32 or char in '\t\n\r')
            
            # Normaliza Unicode
            sanitized = unicodedata.normalize('NFKC', sanitized)
            
            # Escapa HTML se necess√°rio
            if input_type in ['prompt', 'comment', 'content']:
                sanitized = html.escape(sanitized, quote=True)
            
            # Remove espa√ßos em branco extras
            sanitized = ' '.join(sanitized.split())
            
            return sanitized
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na sanitiza√ß√£o: {e}")
            return input_data

    def validate_request_data(self, request_data: Dict[str, Any]) -> Tuple[bool, Optional[str], Optional[Dict]]:
        """
        Valida dados de requisi√ß√£o completa.
        
        Args:
            request_data: Dados da requisi√ß√£o
            
        Returns:
            Tuple[bool, Optional[str], Optional[Dict]]: (sucesso, erro, dados_validados)
        """
        try:
            self.logger.info(f"[{self.tracing_id}] Validando dados de requisi√ß√£o")
            
            validated_data = {}
            
            for key, value in request_data.items():
                # Determina tipo de input baseado na chave
                input_type = self._determine_input_type(key)
                
                # Valida o valor
                success, error, result = self.validate_input(value, input_type)
                
                if not success:
                    return False, f"Erro na valida√ß√£o de {key}: {error}", None
                
                validated_data[key] = result['sanitized']
            
            self.logger.info(f"[{self.tracing_id}] Dados de requisi√ß√£o validados com sucesso")
            return True, None, validated_data
            
        except Exception as e:
            self.logger.error(f"[{self.tracing_id}] Erro na valida√ß√£o de requisi√ß√£o: {e}")
            return False, f"Erro interno na valida√ß√£o: {e}", None

    def _determine_input_type(self, key: str) -> str:
        """Determina o tipo de input baseado na chave"""
        key_lower = key.lower()
        
        if 'email' in key_lower:
            return 'email'
        elif 'url' in key_lower or 'link' in key_lower:
            return 'url'
        elif 'file' in key_lower or 'filename' in key_lower:
            return 'filename'
        elif 'prompt' in key_lower or 'text' in key_lower or 'content' in key_lower:
            return 'prompt'
        elif 'json' in key_lower or 'data' in key_lower:
            return 'json'
        else:
            return 'general'

# Inst√¢ncia global do validador
security_validator = SecurityValidator()

# Fun√ß√µes de conveni√™ncia
def validate_input(input_data: Any, input_type: str = "general") -> Tuple[bool, Optional[str], Optional[Dict]]:
    """Fun√ß√£o de conveni√™ncia para valida√ß√£o de input"""
    return security_validator.validate_input(input_data, input_type)

def validate_request(request_data: Dict[str, Any]) -> Tuple[bool, Optional[str], Optional[Dict]]:
    """Fun√ß√£o de conveni√™ncia para valida√ß√£o de requisi√ß√£o"""
    return security_validator.validate_request_data(request_data)

def sanitize_input(input_data: str, input_type: str = "general") -> str:
    """Fun√ß√£o de conveni√™ncia para sanitiza√ß√£o"""
    success, error, result = security_validator.validate_input(input_data, input_type)
    if success and result:
        return result['sanitized']
    return input_data 