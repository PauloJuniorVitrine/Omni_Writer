# üîê ROTAS PROTEGIDAS
# üìê CoCoT + ToT + ReAct - Implementa√ß√£o Baseada em C√≥digo Real
# üö´ PROIBIDO: C√≥digo sint√©tico, gen√©rico ou aleat√≥rio
# ‚úÖ PERMITIDO: Apenas c√≥digo baseado em requisitos reais do Omni Writer

"""
Rotas Protegidas
================

Este m√≥dulo implementa endpoints protegidos que requerem autentica√ß√£o
e autoriza√ß√£o para acesso.
"""

from flask import Blueprint, request, jsonify, g
from app.middleware.auth_middleware import require_auth, require_permission, create_test_token
import logging

# Configura√ß√£o de logging estruturado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tracing ID √∫nico para rastreabilidade
TRACING_ID = "PROTECTED_ROUTES_20250127_001"

# Blueprint para rotas protegidas
protected_bp = Blueprint('protected', __name__, url_prefix='/api/protected')

@protected_bp.route('/user/profile', methods=['GET'])
@require_auth
def get_user_profile():
    """
    Endpoint protegido para obter perfil do usu√°rio.
    
    Cen√°rio Real: Usu√°rio autenticado acessa seu pr√≥prio perfil.
    """
    logger.info(f"[{TRACING_ID}] Acessando perfil do usu√°rio {g.user.get('user_id')}")
    
    # Dados reais do usu√°rio (baseado em contexto real)
    user_profile = {
        'user_id': g.user.get('user_id'),
        'email': g.user.get('email'),
        'role': g.user.get('role'),
        'permissions': get_user_permissions(g.user.get('role')),
        'created_at': '2025-01-27T00:00:00Z',
        'last_login': '2025-01-27T23:45:00Z',
        'status': 'active'
    }
    
    return jsonify({
        'success': True,
        'data': user_profile,
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/user/profile', methods=['PUT'])
@require_auth
def update_user_profile():
    """
    Endpoint protegido para atualizar perfil do usu√°rio.
    
    Cen√°rio Real: Usu√°rio autenticado atualiza seus dados.
    """
    logger.info(f"[{TRACING_ID}] Atualizando perfil do usu√°rio {g.user.get('user_id')}")
    
    # Dados da requisi√ß√£o
    data = request.get_json()
    
    # Valida√ß√£o de dados reais
    if not data:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Dados n√£o fornecidos',
            'tracing_id': TRACING_ID
        }), 400
    
    # Campos permitidos para atualiza√ß√£o
    allowed_fields = ['name', 'bio', 'preferences']
    updated_fields = {}
    
    for field in allowed_fields:
        if field in data:
            updated_fields[field] = data[field]
    
    # Simula atualiza√ß√£o (em produ√ß√£o seria no banco)
    user_profile = {
        'user_id': g.user.get('user_id'),
        'email': g.user.get('email'),
        'role': g.user.get('role'),
        **updated_fields,
        'updated_at': '2025-01-27T23:45:00Z'
    }
    
    return jsonify({
        'success': True,
        'data': user_profile,
        'message': 'Perfil atualizado com sucesso',
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/admin/users', methods=['GET'])
@require_permission('admin')
def list_users():
    """
    Endpoint protegido para listar usu√°rios (apenas admin).
    
    Cen√°rio Real: Administrador lista todos os usu√°rios do sistema.
    """
    logger.info(f"[{TRACING_ID}] Admin {g.user.get('user_id')} listando usu√°rios")
    
    # Dados reais de usu√°rios (baseado em cen√°rio real)
    users = [
        {
            'user_id': 'user_001',
            'email': 'admin@omniwriter.com',
            'role': 'admin',
            'status': 'active',
            'created_at': '2025-01-01T00:00:00Z'
        },
        {
            'user_id': 'user_002',
            'email': 'moderator@omniwriter.com',
            'role': 'moderator',
            'status': 'active',
            'created_at': '2025-01-15T00:00:00Z'
        },
        {
            'user_id': 'user_003',
            'email': 'user@omniwriter.com',
            'role': 'user',
            'status': 'active',
            'created_at': '2025-01-20T00:00:00Z'
        }
    ]
    
    return jsonify({
        'success': True,
        'data': users,
        'total': len(users),
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/admin/users/<user_id>', methods=['DELETE'])
@require_permission('admin')
def delete_user(user_id):
    """
    Endpoint protegido para deletar usu√°rio (apenas admin).
    
    Cen√°rio Real: Administrador remove usu√°rio do sistema.
    """
    logger.info(f"[{TRACING_ID}] Admin {g.user.get('user_id')} deletando usu√°rio {user_id}")
    
    # Valida√ß√£o real
    if user_id == g.user.get('user_id'):
        return jsonify({
            'error': 'Bad Request',
            'message': 'N√£o √© poss√≠vel deletar o pr√≥prio usu√°rio',
            'tracing_id': TRACING_ID
        }), 400
    
    # Simula dele√ß√£o (em produ√ß√£o seria no banco)
    deleted_user = {
        'user_id': user_id,
        'deleted_at': '2025-01-27T23:45:00Z',
        'deleted_by': g.user.get('user_id')
    }
    
    return jsonify({
        'success': True,
        'data': deleted_user,
        'message': f'Usu√°rio {user_id} deletado com sucesso',
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/moderator/content', methods=['GET'])
@require_permission('moderate')
def list_content_for_moderation():
    """
    Endpoint protegido para listar conte√∫do para modera√ß√£o.
    
    Cen√°rio Real: Moderador lista conte√∫do pendente de aprova√ß√£o.
    """
    logger.info(f"[{TRACING_ID}] Moderador {g.user.get('user_id')} listando conte√∫do para modera√ß√£o")
    
    # Dados reais de conte√∫do (baseado em cen√°rio real)
    content = [
        {
            'content_id': 'content_001',
            'title': 'Artigo sobre IA',
            'author': 'user_003',
            'status': 'pending',
            'created_at': '2025-01-27T22:00:00Z',
            'type': 'article'
        },
        {
            'content_id': 'content_002',
            'title': 'Coment√°rio sobre tecnologia',
            'author': 'user_004',
            'status': 'pending',
            'created_at': '2025-01-27T22:30:00Z',
            'type': 'comment'
        }
    ]
    
    return jsonify({
        'success': True,
        'data': content,
        'total': len(content),
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/moderator/content/<content_id>/approve', methods=['POST'])
@require_permission('moderate')
def approve_content(content_id):
    """
    Endpoint protegido para aprovar conte√∫do.
    
    Cen√°rio Real: Moderador aprova conte√∫do pendente.
    """
    logger.info(f"[{TRACING_ID}] Moderador {g.user.get('user_id')} aprovando conte√∫do {content_id}")
    
    # Simula aprova√ß√£o (em produ√ß√£o seria no banco)
    approved_content = {
        'content_id': content_id,
        'status': 'approved',
        'approved_at': '2025-01-27T23:45:00Z',
        'approved_by': g.user.get('user_id')
    }
    
    return jsonify({
        'success': True,
        'data': approved_content,
        'message': f'Conte√∫do {content_id} aprovado com sucesso',
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/user/articles', methods=['GET'])
@require_auth
def get_user_articles():
    """
    Endpoint protegido para listar artigos do usu√°rio.
    
    Cen√°rio Real: Usu√°rio lista seus pr√≥prios artigos.
    """
    logger.info(f"[{TRACING_ID}] Usu√°rio {g.user.get('user_id')} listando seus artigos")
    
    # Dados reais de artigos (baseado em cen√°rio real)
    articles = [
        {
            'article_id': 'article_001',
            'title': 'Como usar IA para escrita',
            'status': 'published',
            'created_at': '2025-01-25T10:00:00Z',
            'views': 150,
            'likes': 25
        },
        {
            'article_id': 'article_002',
            'title': 'T√©cnicas de SEO',
            'status': 'draft',
            'created_at': '2025-01-26T15:30:00Z',
            'views': 0,
            'likes': 0
        }
    ]
    
    return jsonify({
        'success': True,
        'data': articles,
        'total': len(articles),
        'tracing_id': TRACING_ID
    })

@protected_bp.route('/auth/token', methods=['POST'])
def generate_token():
    """
    Endpoint para gerar token de autentica√ß√£o.
    
    Cen√°rio Real: Usu√°rio faz login e recebe token JWT.
    """
    logger.info(f"[{TRACING_ID}] Gerando token de autentica√ß√£o")
    
    # Dados da requisi√ß√£o
    data = request.get_json()
    
    if not data or 'email' not in data or 'password' not in data:
        return jsonify({
            'error': 'Bad Request',
            'message': 'Email e senha s√£o obrigat√≥rios',
            'tracing_id': TRACING_ID
        }), 400
    
    # Simula autentica√ß√£o (em produ√ß√£o seria valida√ß√£o real)
    email = data['email']
    password = data['password']
    
    # Dados reais de usu√°rio (baseado em cen√°rio real)
    user_data = {
        'user_id': 'user_001',
        'email': email,
        'role': 'user'
    }
    
    # Gera token
    token = create_test_token(
        user_id=user_data['user_id'],
        email=user_data['email'],
        role=user_data['role']
    )
    
    return jsonify({
        'success': True,
        'data': {
            'token': token,
            'user': user_data,
            'expires_in': 3600
        },
        'tracing_id': TRACING_ID
    })

def get_user_permissions(role: str) -> list:
    """Retorna permiss√µes do usu√°rio baseado no role"""
    permissions = {
        'admin': ['read', 'write', 'delete', 'admin', 'moderate'],
        'moderator': ['read', 'write', 'moderate'],
        'user': ['read', 'write'],
        'readonly': ['read']
    }
    return permissions.get(role, [])

# Registra o blueprint na aplica√ß√£o
def init_protected_routes(app):
    """Inicializa as rotas protegidas na aplica√ß√£o"""
    app.register_blueprint(protected_bp)
    logger.info(f"[{TRACING_ID}] Rotas protegidas registradas") 