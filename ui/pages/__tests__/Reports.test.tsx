/**
 * Testes Unit√°rios - P√°gina de Exporta√ß√£o e Relat√≥rios
 * 
 * Prompt: Interface Gr√°fica v3.5 Enterprise+ - UI-023
 * Data/Hora: 2025-01-28T00:00:00Z
 * Tracing ID: UI_IMPLEMENTATION_20250128_001
 * 
 * Testes baseados em c√≥digo real da p√°gina de Reports
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Reports } from '../Reports';
import { useI18n } from '../../hooks/use_i18n';
import { useApi } from '../../hooks/use_api';

// Mock dos hooks
jest.mock('../../hooks/use_i18n');
jest.mock('../../hooks/use_api');

const mockUseI18n = useI18n as jest.MockedFunction<typeof useI18n>;
const mockUseApi = useApi as jest.MockedFunction<typeof useApi>;

const mockApiCall = jest.fn();

describe('Reports Page', () => {
  beforeEach(() => {
    mockUseI18n.mockReturnValue({
      t: (key: string) => key,
      lang: 'pt_BR',
      setLang: jest.fn(),
      languages: ['pt_BR', 'en_US'],
      languageConfig: {
        name: 'Portugu√™s (Brasil)',
        nativeName: 'Portugu√™s (Brasil)',
        flag: 'üáßüá∑',
        direction: 'ltr' as const,
        dateFormat: 'dd/MM/yyyy',
        timeFormat: 'HH:mm',
        currency: 'BRL'
      },
      availableLanguages: [],
      formatDate: jest.fn(),
      formatTime: jest.fn(),
      formatNumber: jest.fn(),
      formatCurrency: jest.fn(),
      formatPlural: jest.fn(),
      detectLanguage: jest.fn()
    });

    mockUseApi.mockReturnValue({
      apiCall: mockApiCall,
      isLoading: false,
      error: null
    });

    mockApiCall.mockResolvedValue({
      success: true,
      data: {}
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const renderReports = () => {
    return render(<Reports />);
  };

  describe('Renderiza√ß√£o Principal', () => {
    it('deve renderizar o t√≠tulo e descri√ß√£o da p√°gina', () => {
      renderReports();
      
      expect(screen.getByText('Exporta√ß√£o e Relat√≥rios')).toBeInTheDocument();
      expect(screen.getByText(/Gere relat√≥rios personalizados/)).toBeInTheDocument();
    });

    it('deve renderizar as abas de navega√ß√£o', () => {
      renderReports();
      
      expect(screen.getByText('üìä Templates (4)')).toBeInTheDocument();
      expect(screen.getByText('üìã Relat√≥rios (3)')).toBeInTheDocument();
      expect(screen.getByText('üìÖ Agendados (0)')).toBeInTheDocument();
    });

    it('deve mostrar a aba Templates por padr√£o', () => {
      renderReports();
      
      expect(screen.getByText('Resumo de Artigos')).toBeInTheDocument();
      expect(screen.getByText('Performance dos Blogs')).toBeInTheDocument();
      expect(screen.getByText('An√°lise de Prompts')).toBeInTheDocument();
      expect(screen.getByText('Analytics do Sistema')).toBeInTheDocument();
    });
  });

  describe('Templates de Relat√≥rios', () => {
    beforeEach(() => {
      renderReports();
    });

    it('deve renderizar todos os templates dispon√≠veis', () => {
      expect(screen.getByText('Resumo de Artigos')).toBeInTheDocument();
      expect(screen.getByText('Relat√≥rio completo de artigos gerados com m√©tricas e an√°lises')).toBeInTheDocument();
      
      expect(screen.getByText('Performance dos Blogs')).toBeInTheDocument();
      expect(screen.getByText('An√°lise de performance e engajamento dos blogs')).toBeInTheDocument();
      
      expect(screen.getByText('An√°lise de Prompts')).toBeInTheDocument();
      expect(screen.getByText('Relat√≥rio detalhado sobre efic√°cia dos prompts')).toBeInTheDocument();
      
      expect(screen.getByText('Analytics do Sistema')).toBeInTheDocument();
      expect(screen.getByText('M√©tricas de performance e uso do sistema')).toBeInTheDocument();
    });

    it('deve mostrar informa√ß√µes corretas dos templates', () => {
      // Verificar tipos de relat√≥rio
      expect(screen.getAllByText('PDF')).toHaveLength(2);
      expect(screen.getAllByText('EXCEL')).toHaveLength(1);
      expect(screen.getAllByText('CUSTOM')).toHaveLength(1);
      
      // Verificar categorias
      expect(screen.getAllByText('articles')).toHaveLength(1);
      expect(screen.getAllByText('blogs')).toHaveLength(1);
      expect(screen.getAllByText('prompts')).toHaveLength(1);
      expect(screen.getAllByText('analytics')).toHaveLength(1);
    });

    it('deve ter bot√µes de a√ß√£o para cada template', () => {
      const previewButtons = screen.getAllByText('üëÅÔ∏è Preview');
      const generateButtons = screen.getAllByText('üìä Gerar');
      
      expect(previewButtons).toHaveLength(4);
      expect(generateButtons).toHaveLength(4);
    });

    it('deve abrir modal de preview ao clicar em Preview', async () => {
      const previewButtons = screen.getAllByText('üëÅÔ∏è Preview');
      fireEvent.click(previewButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Preview: Resumo de Artigos')).toBeInTheDocument();
      });
    });

    it('deve abrir modal de gera√ß√£o ao clicar em Gerar', async () => {
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
    });
  });

  describe('Modal de Gera√ß√£o de Relat√≥rio', () => {
    beforeEach(async () => {
      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
    });

    it('deve mostrar filtros do template', () => {
      expect(screen.getByText('Filtros')).toBeInTheDocument();
      expect(screen.getByText('Per√≠odo')).toBeInTheDocument();
      expect(screen.getByText('Categoria')).toBeInTheDocument();
      expect(screen.getByText('M√≠nimo de palavras')).toBeInTheDocument();
    });

    it('deve mostrar op√ß√µes de exporta√ß√£o', () => {
      expect(screen.getByText('Op√ß√µes de Exporta√ß√£o')).toBeInTheDocument();
      expect(screen.getByText('Formato')).toBeInTheDocument();
      expect(screen.getByText('Senha (opcional)')).toBeInTheDocument();
    });

    it('deve ter switches para op√ß√µes de exporta√ß√£o', () => {
      expect(screen.getByText('Incluir gr√°ficos')).toBeInTheDocument();
      expect(screen.getByText('Incluir metadados')).toBeInTheDocument();
      expect(screen.getByText('Comprimir arquivo')).toBeInTheDocument();
      expect(screen.getByText('Estilo personalizado')).toBeInTheDocument();
    });

    it('deve ter bot√µes de a√ß√£o', () => {
      expect(screen.getByText('üìÖ Agendar')).toBeInTheDocument();
      expect(screen.getByText('Gerar Relat√≥rio')).toBeInTheDocument();
    });

    it('deve permitir alterar formato de exporta√ß√£o', async () => {
      const formatSelect = screen.getByDisplayValue('PDF');
      fireEvent.change(formatSelect, { target: { value: 'excel' } });
      
      expect(formatSelect).toHaveValue('excel');
    });

    it('deve permitir adicionar senha', () => {
      const passwordInput = screen.getByPlaceholderText('Senha para proteger o arquivo');
      fireEvent.change(passwordInput, { target: { value: 'senha123' } });
      
      expect(passwordInput).toHaveValue('senha123');
    });

    it('deve permitir configurar filtros', () => {
      const categorySelect = screen.getByDisplayValue('');
      fireEvent.change(categorySelect, { target: { value: 'Tecnologia' } });
      
      expect(categorySelect).toHaveValue('Tecnologia');
    });
  });

  describe('Gera√ß√£o de Relat√≥rios', () => {
    beforeEach(async () => {
      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
    });

    it('deve gerar relat√≥rio com sucesso', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true,
        data: { id: 'new-report-123' }
      });

      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);

      await waitFor(() => {
        expect(mockApiCall).toHaveBeenCalledWith('/api/reports/generate', 'POST', expect.any(Object));
      });
    });

    it('deve mostrar erro na gera√ß√£o', async () => {
      mockApiCall.mockRejectedValueOnce(new Error('Erro na gera√ß√£o'));

      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);

      await waitFor(() => {
        expect(screen.getByText('Erro ao gerar relat√≥rio')).toBeInTheDocument();
      });
    });

    it('deve fechar modal ap√≥s gera√ß√£o bem-sucedida', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true,
        data: { id: 'new-report-123' }
      });

      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);

      await waitFor(() => {
        expect(screen.queryByText('Gerar Relat√≥rio: Resumo de Artigos')).not.toBeInTheDocument();
      });
    });
  });

  describe('Aba de Relat√≥rios', () => {
    beforeEach(() => {
      renderReports();
      const reportsTab = screen.getByText('üìã Relat√≥rios (3)');
      fireEvent.click(reportsTab);
    });

    it('deve mostrar lista de relat√≥rios', () => {
      expect(screen.getByText('Resumo de Artigos - Janeiro 2025')).toBeInTheDocument();
      expect(screen.getByText('Performance dos Blogs - Dezembro 2024')).toBeInTheDocument();
      expect(screen.getByText('An√°lise de Prompts - Q4 2024')).toBeInTheDocument();
    });

    it('deve mostrar status dos relat√≥rios', () => {
      expect(screen.getByText('‚úÖ Conclu√≠do')).toBeInTheDocument();
      expect(screen.getByText('‚è≥ Gerando...')).toBeInTheDocument();
      expect(screen.getByText('‚ùå Falhou')).toBeInTheDocument();
    });

    it('deve mostrar progresso para relat√≥rios em gera√ß√£o', () => {
      expect(screen.getByText('65%')).toBeInTheDocument();
    });

    it('deve mostrar tamanho dos arquivos', () => {
      expect(screen.getByText('2.0 MB')).toBeInTheDocument();
    });

    it('deve mostrar erro para relat√≥rios falhados', () => {
      expect(screen.getByText('Erro na gera√ß√£o do relat√≥rio: dados insuficientes')).toBeInTheDocument();
    });

    it('deve ter bot√µes de a√ß√£o para relat√≥rios', () => {
      const downloadButtons = screen.getAllByText('üì• Baixar');
      const detailsButtons = screen.getAllByText('‚ÑπÔ∏è Detalhes');
      const deleteButtons = screen.getAllByText('üóëÔ∏è Excluir');
      
      expect(downloadButtons).toHaveLength(1); // Apenas relat√≥rios conclu√≠dos
      expect(detailsButtons).toHaveLength(3);
      expect(deleteButtons).toHaveLength(3);
    });
  });

  describe('Download de Relat√≥rios', () => {
    beforeEach(() => {
      renderReports();
      const reportsTab = screen.getByText('üìã Relat√≥rios (3)');
      fireEvent.click(reportsTab);
    });

    it('deve baixar relat√≥rio com sucesso', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true,
        data: 'fake-pdf-content'
      });

      const downloadButton = screen.getByText('üì• Baixar');
      fireEvent.click(downloadButton);

      await waitFor(() => {
        expect(mockApiCall).toHaveBeenCalledWith('/reports/1.pdf', 'GET');
      });
    });

    it('deve mostrar erro no download', async () => {
      mockApiCall.mockRejectedValueOnce(new Error('Erro no download'));

      const downloadButton = screen.getByText('üì• Baixar');
      fireEvent.click(downloadButton);

      await waitFor(() => {
        expect(screen.getByText('Erro ao baixar relat√≥rio')).toBeInTheDocument();
      });
    });
  });

  describe('Exclus√£o de Relat√≥rios', () => {
    beforeEach(() => {
      renderReports();
      const reportsTab = screen.getByText('üìã Relat√≥rios (3)');
      fireEvent.click(reportsTab);
    });

    it('deve excluir relat√≥rio com sucesso', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true
      });

      const deleteButtons = screen.getAllByText('üóëÔ∏è Excluir');
      fireEvent.click(deleteButtons[0]);

      await waitFor(() => {
        expect(mockApiCall).toHaveBeenCalledWith('/api/reports/1', 'DELETE');
      });
    });

    it('deve mostrar erro na exclus√£o', async () => {
      mockApiCall.mockRejectedValueOnce(new Error('Erro na exclus√£o'));

      const deleteButtons = screen.getAllByText('üóëÔ∏è Excluir');
      fireEvent.click(deleteButtons[0]);

      await waitFor(() => {
        expect(screen.getByText('Erro ao excluir relat√≥rio')).toBeInTheDocument();
      });
    });
  });

  describe('Modal de Detalhes do Relat√≥rio', () => {
    beforeEach(async () => {
      renderReports();
      const reportsTab = screen.getByText('üìã Relat√≥rios (3)');
      fireEvent.click(reportsTab);
      
      const detailsButtons = screen.getAllByText('‚ÑπÔ∏è Detalhes');
      fireEvent.click(detailsButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Detalhes do Relat√≥rio: Resumo de Artigos - Janeiro 2025')).toBeInTheDocument();
      });
    });

    it('deve mostrar informa√ß√µes detalhadas do relat√≥rio', () => {
      expect(screen.getByText('Status:')).toBeInTheDocument();
      expect(screen.getByText('Tipo:')).toBeInTheDocument();
      expect(screen.getByText('Criado em:')).toBeInTheDocument();
      expect(screen.getByText('Conclu√≠do em:')).toBeInTheDocument();
      expect(screen.getByText('Tamanho:')).toBeInTheDocument();
    });

    it('deve mostrar bot√£o de download para relat√≥rios conclu√≠dos', () => {
      expect(screen.getByText('üì• Baixar Relat√≥rio')).toBeInTheDocument();
    });
  });

  describe('Modal de Preview', () => {
    beforeEach(async () => {
      renderReports();
      const previewButtons = screen.getAllByText('üëÅÔ∏è Preview');
      fireEvent.click(previewButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Preview: Resumo de Artigos')).toBeInTheDocument();
      });
    });

    it('deve mostrar campos inclu√≠dos no template', () => {
      expect(screen.getByText('Campos inclu√≠dos:')).toBeInTheDocument();
      expect(screen.getByText('title')).toBeInTheDocument();
      expect(screen.getByText('content')).toBeInTheDocument();
      expect(screen.getByText('category')).toBeInTheDocument();
    });

    it('deve mostrar filtros dispon√≠veis', () => {
      expect(screen.getByText('Filtros dispon√≠veis:')).toBeInTheDocument();
      expect(screen.getByText('Per√≠odo')).toBeInTheDocument();
      expect(screen.getByText('Categoria')).toBeInTheDocument();
      expect(screen.getByText('M√≠nimo de palavras')).toBeInTheDocument();
    });

    it('deve mostrar se filtros s√£o obrigat√≥rios ou opcionais', () => {
      expect(screen.getByText('Obrigat√≥rio')).toBeInTheDocument();
      expect(screen.getByText('Opcional')).toBeInTheDocument();
    });

    it('deve ter bot√£o para gerar relat√≥rio', () => {
      expect(screen.getByText('Gerar Relat√≥rio')).toBeInTheDocument();
    });
  });

  describe('Aba de Relat√≥rios Agendados', () => {
    beforeEach(() => {
      renderReports();
      const scheduledTab = screen.getByText('üìÖ Agendados (0)');
      fireEvent.click(scheduledTab);
    });

    it('deve mostrar mensagem quando n√£o h√° relat√≥rios agendados', () => {
      expect(screen.getByText('Nenhum relat√≥rio agendado')).toBeInTheDocument();
      expect(screen.getByText(/Agende relat√≥rios autom√°ticos/)).toBeInTheDocument();
      expect(screen.getByText('Agendar Relat√≥rio')).toBeInTheDocument();
    });
  });

  describe('Agendamento de Relat√≥rios', () => {
    beforeEach(async () => {
      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
      
      const scheduleButton = screen.getByText('üìÖ Agendar');
      fireEvent.click(scheduleButton);
      
      await waitFor(() => {
        expect(screen.getByText('Agendar Relat√≥rio')).toBeInTheDocument();
      });
    });

    it('deve mostrar formul√°rio de agendamento', () => {
      expect(screen.getByText('Frequ√™ncia')).toBeInTheDocument();
      expect(screen.getByText('Hor√°rio')).toBeInTheDocument();
      expect(screen.getByText('Destinat√°rios (emails separados por v√≠rgula)')).toBeInTheDocument();
      expect(screen.getByText('Formato')).toBeInTheDocument();
    });

    it('deve permitir configurar frequ√™ncia', () => {
      const frequencySelect = screen.getByDisplayValue('Semanal');
      fireEvent.change(frequencySelect, { target: { value: 'daily' } });
      
      expect(frequencySelect).toHaveValue('daily');
    });

    it('deve permitir configurar hor√°rio', () => {
      const timeInput = screen.getByDisplayValue('09:00');
      fireEvent.change(timeInput, { target: { value: '14:30' } });
      
      expect(timeInput).toHaveValue('14:30');
    });

    it('deve permitir configurar destinat√°rios', () => {
      const recipientsInput = screen.getByPlaceholderText('usuario@exemplo.com, admin@exemplo.com');
      fireEvent.change(recipientsInput, { target: { value: 'test@example.com' } });
      
      expect(recipientsInput).toHaveValue('test@example.com');
    });

    it('deve permitir configurar formato', () => {
      const formatSelect = screen.getByDisplayValue('PDF');
      fireEvent.change(formatSelect, { target: { value: 'excel' } });
      
      expect(formatSelect).toHaveValue('excel');
    });

    it('deve agendar relat√≥rio com sucesso', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true
      });

      const scheduleButton = screen.getByText('Agendar');
      fireEvent.click(scheduleButton);

      await waitFor(() => {
        expect(mockApiCall).toHaveBeenCalledWith('/api/reports/schedule', 'POST', expect.any(Object));
      });
    });
  });

  describe('Navega√ß√£o entre Abas', () => {
    it('deve alternar entre abas corretamente', () => {
      renderReports();
      
      // Inicialmente na aba Templates
      expect(screen.getByText('Resumo de Artigos')).toBeInTheDocument();
      
      // Ir para aba Relat√≥rios
      const reportsTab = screen.getByText('üìã Relat√≥rios (3)');
      fireEvent.click(reportsTab);
      expect(screen.getByText('Resumo de Artigos - Janeiro 2025')).toBeInTheDocument();
      
      // Ir para aba Agendados
      const scheduledTab = screen.getByText('üìÖ Agendados (0)');
      fireEvent.click(scheduledTab);
      expect(screen.getByText('Nenhum relat√≥rio agendado')).toBeInTheDocument();
      
      // Voltar para aba Templates
      const templatesTab = screen.getByText('üìä Templates (4)');
      fireEvent.click(templatesTab);
      expect(screen.getByText('Resumo de Artigos')).toBeInTheDocument();
    });
  });

  describe('Estados de Loading', () => {
    it('deve mostrar loading durante gera√ß√£o', async () => {
      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
      
      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);
      
      await waitFor(() => {
        expect(screen.getByText('Gerando...')).toBeInTheDocument();
      });
    });
  });

  describe('Feedback ao Usu√°rio', () => {
    it('deve mostrar toast de sucesso', async () => {
      mockApiCall.mockResolvedValueOnce({
        success: true,
        data: { id: 'new-report-123' }
      });

      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
      
      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);

      await waitFor(() => {
        expect(screen.getByText('Relat√≥rio iniciado com sucesso')).toBeInTheDocument();
      });
    });

    it('deve mostrar toast de erro', async () => {
      mockApiCall.mockRejectedValueOnce(new Error('Erro na gera√ß√£o'));

      renderReports();
      const generateButtons = screen.getAllByText('üìä Gerar');
      fireEvent.click(generateButtons[0]);
      
      await waitFor(() => {
        expect(screen.getByText('Gerar Relat√≥rio: Resumo de Artigos')).toBeInTheDocument();
      });
      
      const generateButton = screen.getByText('Gerar Relat√≥rio');
      fireEvent.click(generateButton);

      await waitFor(() => {
        expect(screen.getByText('Erro ao gerar relat√≥rio')).toBeInTheDocument();
      });
    });
  });

  describe('Responsividade', () => {
    it('deve renderizar todos os componentes base', () => {
      renderReports();
      
      expect(screen.getAllByTestId('card')).toHaveLength(expect.any(Number));
      expect(screen.getAllByTestId('button')).toHaveLength(expect.any(Number));
      expect(screen.getAllByTestId('input')).toHaveLength(expect.any(Number));
      expect(screen.getAllByTestId('select')).toHaveLength(expect.any(Number));
      expect(screen.getAllByTestId('switch')).toHaveLength(expect.any(Number));
    });

    it('deve ter estrutura de grid responsiva', () => {
      renderReports();
      
      const cards = screen.getAllByTestId('card');
      expect(cards.length).toBeGreaterThan(0);
    });
  });
}); 