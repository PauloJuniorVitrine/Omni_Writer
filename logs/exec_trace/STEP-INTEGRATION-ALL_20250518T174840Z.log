============================= test session starts =============================
platform win32 -- Python 3.11.0, pytest-7.4.0, pluggy-1.5.0 -- C:\Users\SEDUC\Desktop\PROJETOS\omni_gerador_artigos\venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: D:\PROJETOS\SISTEMAS
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.21.1, cov-4.1.0, mock-3.11.1
asyncio: mode=Mode.STRICT
collecting ... [status_repository] Banco de status N├âO inicializado (ENABLE_STATUS_DB != 1).
collected 357 items / 349 deselected / 8 selected

tests\integration\test_celery_worker_integration.py::test_celery_worker_execucao_real FAILED [ 12%]
tests\integration\test_export_artigos_csv.py::test_export_artigos_csv FAILED [ 25%]
tests\integration\test_export_prompts_csv.py::test_export_prompts_csv FAILED [ 37%]

================================== FAILURES ===================================
______________________ test_celery_worker_execucao_real _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x00000210E0E8F490>

    @pytest.mark.integration
    @pytest.mark.usefixtures("limpar_ambiente")
    def test_celery_worker_execucao_real(monkeypatch):
        """
        Teste de integra├º├úo real do Worker Celery:
        - Envia tarefa para o worker
        - Aguarda execu├º├úo ass├¡ncrona
        - Valida gera├º├úo do arquivo ZIP
        - Valida status de gera├º├úo
        - Valida logs e efeitos colaterais
        """
        # Configura├º├úo m├¡nima para gera├º├úo
        config = {
            "api_key": "sk-teste",
            "model_type": "openai",
            "prompts": [{"text": "prompt celery", "index": 0}]
        }
        # Envia tarefa Celery
        async_result = gerar_artigos_task.apply_async(args=[config], kwargs={"trace_id": "celery-integration-test"})
        # Aguarda conclus├úo (timeout 90s)
        timeout = 90
        for _ in range(timeout):
            if async_result.ready():
                break
            time.sleep(1)
>       assert async_result.ready(), "Tarefa Celery n├úo finalizou em tempo h├íbil"
E       AssertionError: Tarefa Celery n├úo finalizou em tempo h├íbil
E       assert False
E        +  where False = <bound method AsyncResult.ready of <AsyncResult: 21323659-e11f-48ee-b327-d23bcdaeda83>>()
E        +    where <bound method AsyncResult.ready of <AsyncResult: 21323659-e11f-48ee-b327-d23bcdaeda83>> = <AsyncResult: 21323659-e11f-48ee-b327-d23bcdaeda83>.ready

tests\integration\test_celery_worker_integration.py:41: AssertionError
___________________________ test_export_artigos_csv ___________________________

client = <FlaskClient <Flask 'app.app_factory'>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x00000210E125A4D0>

    @pytest.mark.integration
    def test_export_artigos_csv(client, monkeypatch):
        resp = client.get('/export_artigos_csv')
        assert resp.status_code == 200
        content = resp.data.decode('utf-8')
        reader = csv.reader(io.StringIO(content))
        rows = list(reader)
        # Aceita varia├º├Áes de cabe├ºalho (capitaliza├º├úo, acentua├º├úo, colunas extras)
        header = [h.strip().lower().replace('├ú', 'a').replace('├¡', 'i').replace('├®', 'e') for h in rows[0]]
        esperado = ['instancia', 'prompt', 'arquivo', 'conteudo']
>       assert all(e in header for e in esperado[:len(header)]), f"Cabe├ºalho inesperado: {rows[0]}"
E       AssertionError: Cabe├ºalho inesperado: ['Inst├óncia', 'Prompt', 'Artigo']
E       assert False
E        +  where False = all(<generator object test_export_artigos_csv.<locals>.<genexpr> at 0x00000210E124B220>)

tests\integration\test_export_artigos_csv.py:23: AssertionError
------------------------------ Captured log call ------------------------------
INFO     omni_structured:routes.py:63 {"timestamp_utc": "2025-05-18T20:50:26.069921", "ip": "127.0.0.1", "rota": "/export_artigos_csv", "metodo": "GET", "status": 200, "user_agent": "Werkzeug/3.1.3", "trace_id": null, "operation_type": "export_artigos_csv", "user_id": null}
___________________________ test_export_prompts_csv ___________________________

client = <FlaskClient <Flask 'app.app_factory'>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x00000210E12BE590>

    @pytest.mark.integration
    def test_export_prompts_csv(client, monkeypatch):
        # Gera prompts para exporta├º├úo (simula gera├º├úo)
        # Aqui, idealmente, seria feita uma gera├º├úo real, mas para o teste, simula arquivo
        resp = client.get('/export_prompts')
        assert resp.status_code == 200
        content = resp.data.decode('utf-8')
        reader = csv.reader(io.StringIO(content))
        rows = list(reader)
        # Aceita varia├º├Áes de cabe├ºalho (capitaliza├º├úo, acentua├º├úo, colunas extras)
        header = [h.strip().lower().replace('├ú', 'a').replace('├¡', 'i').replace('├®', 'e') for h in rows[0]]
        esperado = ['instancia', 'prompt']
>       assert all(e in header for e in esperado[:len(header)]), f"Cabe├ºalho inesperado: {rows[0]}"
E       AssertionError: Cabe├ºalho inesperado: ['Prompt']
E       assert False
E        +  where False = all(<generator object test_export_prompts_csv.<locals>.<genexpr> at 0x00000210E12A8040>)

tests\integration\test_export_prompts_csv.py:25: AssertionError
------------------------------ Captured log call ------------------------------
INFO     omni_structured:routes.py:63 {"timestamp_utc": "2025-05-18T20:50:26.347449", "ip": "127.0.0.1", "rota": "/export_prompts", "metodo": "GET", "status": 200, "user_agent": "Werkzeug/3.1.3", "trace_id": null, "operation_type": "export_prompts", "user_id": null}
=========================== short test summary info ===========================
FAILED tests\integration\test_celery_worker_integration.py::test_celery_worker_execucao_real
FAILED tests\integration\test_export_artigos_csv.py::test_export_artigos_csv
FAILED tests\integration\test_export_prompts_csv.py::test_export_prompts_csv
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 3 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
========= 3 failed, 349 deselected, 15 warnings in 103.06s (0:01:43) ==========
